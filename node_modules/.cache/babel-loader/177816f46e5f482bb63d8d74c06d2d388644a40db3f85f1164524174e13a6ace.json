{"ast":null,"code":"var _jsxFileName = \"D:\\\\polleditor-server\\\\polleditor-server\\\\poll-editor\\\\src\\\\components\\\\PollEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { usePollContext } from '../context/PollContext';\nimport { createPoll, updatePoll, deletePoll, resetPoll } from '../redux/pollsSlice';\nimport socketService from '../socket/socket';\nimport LexicalEditor from './LexicalEditor';\nimport './PollEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractPlainFromMaybeJson = str => {\n  if (!str) return '';\n  const trimmed = String(str).trim();\n  if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\n    try {\n      var _json$root;\n      const json = JSON.parse(trimmed);\n      const children = (json === null || json === void 0 ? void 0 : (_json$root = json.root) === null || _json$root === void 0 ? void 0 : _json$root.children) || [];\n      const text = children.map(node => Array.isArray(node.children) ? node.children.map(c => c.text || '').join('') : '').join(' ').trim();\n      return text || '';\n    } catch (_) {\n      return '';\n    }\n  }\n  return trimmed;\n};\nconst PollEditor = ({\n  poll,\n  onPollSelect\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    settings\n  } = usePollContext();\n  const [questionText, setQuestionText] = useState('');\n  const [questionHtml, setQuestionHtml] = useState('');\n  const [options, setOptions] = useState(['', '']);\n  const [isActive, setIsActive] = useState(true);\n  const [allowMultipleVotes, setAllowMultipleVotes] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState('');\n\n  // Initialize form when poll changes\n  useEffect(() => {\n    if (poll) {\n      var _poll$options;\n      const plain = extractPlainFromMaybeJson(poll.question);\n      setQuestionText(plain || '');\n      setQuestionHtml(poll.questionHtml || '');\n      setOptions(((_poll$options = poll.options) === null || _poll$options === void 0 ? void 0 : _poll$options.map(opt => opt.text)) || ['', '']);\n      setIsActive(poll.isActive !== false);\n      // Ensure proper boolean handling for allowMultipleVotes\n      setAllowMultipleVotes(poll.allowMultipleVotes === true || poll.allowMultipleVotes === 'true');\n    } else {\n      // New poll defaults to 2 empty options\n      setQuestionText('');\n      setQuestionHtml('');\n      setOptions(['', '']);\n      setIsActive(true);\n      setAllowMultipleVotes(true); // Default to true (checked)\n    }\n    setError('');\n  }, [poll]);\n  const handleQuestionChange = useCallback(({\n    plain,\n    html\n  }) => {\n    setQuestionText(plain || '');\n    setQuestionHtml(html || '');\n  }, []);\n  const handleOptionChange = (index, value) => {\n    const newOptions = [...options];\n    newOptions[index] = value;\n    setOptions(newOptions);\n  };\n  const addOption = () => {\n    setOptions([...options, '']);\n  };\n  const removeOption = index => {\n    if (options.length > 2) {\n      const newOptions = options.filter((_, i) => i !== index);\n      setOptions(newOptions);\n    }\n  };\n  const handleSave = async () => {\n    if (!questionText.trim()) {\n      setError('Question is required');\n      return;\n    }\n    const validOptions = options.filter(opt => opt.trim());\n    if (validOptions.length < 2) {\n      setError('At least 2 options are required');\n      return;\n    }\n    setIsSaving(true);\n    setError('');\n    try {\n      const pollData = {\n        question: questionText.trim(),\n        questionHtml,\n        options: validOptions,\n        isActive,\n        allowMultipleVotes,\n        contentType: 'lexical'\n      };\n      let result;\n      if (poll) {\n        // Update existing poll\n        result = await dispatch(updatePoll({\n          id: poll._id,\n          pollData\n        })).unwrap();\n        socketService.broadcastPollUpdated(result);\n      } else {\n        // Create new poll\n        result = await dispatch(createPoll(pollData)).unwrap();\n        socketService.broadcastPollCreated(result);\n        onPollSelect(result);\n      }\n      if (settings.autoSave) {\n        // Auto-save feedback\n        setTimeout(() => {\n          setIsSaving(false);\n        }, 1000);\n      } else {\n        setIsSaving(false);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to save poll');\n      setIsSaving(false);\n    }\n  };\n  const handleReset = async () => {\n    try {\n      if (poll) {\n        const updated = await dispatch(resetPoll(poll._id)).unwrap();\n        socketService.broadcastPollUpdated(updated);\n      }\n      // Reset form values to current poll state or defaults\n      if (poll) {\n        var _poll$options2;\n        const plain = extractPlainFromMaybeJson(poll.question);\n        setQuestionText(plain || '');\n        setQuestionHtml(poll.questionHtml || '');\n        setOptions(((_poll$options2 = poll.options) === null || _poll$options2 === void 0 ? void 0 : _poll$options2.map(opt => opt.text)) || ['', '']);\n        setIsActive(poll.isActive !== false);\n        setAllowMultipleVotes(poll.allowMultipleVotes === true || poll.allowMultipleVotes === 'true');\n      } else {\n        setQuestionText('');\n        setQuestionHtml('');\n        setOptions(['', '']);\n        setIsActive(true);\n        setAllowMultipleVotes(true);\n      }\n      setError('');\n    } catch (e) {\n      setError('Failed to reset poll');\n    }\n  };\n  const handleDelete = async () => {\n    if (!poll) return;\n    try {\n      await dispatch(deletePoll(poll._id)).unwrap();\n      socketService.broadcastPollDeleted(poll._id);\n      onPollSelect(null);\n    } catch (e) {\n      setError('Failed to delete poll');\n    }\n  };\n\n  // Prefer to seed editor with HTML or plain text; if older polls contain JSON in question, editor handles it, preview uses extracted plain\n  const initialEditorValue = poll ? poll.question || poll.questionHtml || '' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll-editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-editor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: poll ? 'Edit Poll' : 'Create New Poll'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-editor-actions\",\n        children: [poll && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: handleReset,\n          disabled: isSaving,\n          title: \"Reset votes\",\n          children: \"Reset Votes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => {\n            // revert UI fields to defaults/current\n            if (poll) {\n              var _poll$options3;\n              const plain = extractPlainFromMaybeJson(poll.question);\n              setQuestionText(plain || '');\n              setQuestionHtml(poll.questionHtml || '');\n              setOptions(((_poll$options3 = poll.options) === null || _poll$options3 === void 0 ? void 0 : _poll$options3.map(opt => opt.text)) || ['', '']);\n              setIsActive(poll.isActive !== false);\n              setAllowMultipleVotes(poll.allowMultipleVotes === true);\n            } else {\n              setQuestionText('');\n              setQuestionHtml('');\n              setOptions(['', '']);\n              setIsActive(true);\n              setAllowMultipleVotes(true);\n            }\n          },\n          disabled: isSaving,\n          children: \"Reset Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), poll && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: handleDelete,\n          disabled: isSaving,\n          title: \"Delete poll\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: handleSave,\n          disabled: isSaving,\n          children: isSaving ? 'Saving...' : poll ? 'Update' : 'Create'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-editor-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lexical-editor-container\",\n          children: /*#__PURE__*/_jsxDEV(LexicalEditor, {\n            initialValue: initialEditorValue,\n            onChange: handleQuestionChange,\n            placeholder: \"Enter your poll question...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option-input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input option-input\",\n              value: option,\n              onChange: e => handleOptionChange(index, e.target.value),\n              placeholder: `Option ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this), options.length > 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-remove\",\n              onClick: () => removeOption(index),\n              title: \"Remove option\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-secondary btn-add-option\",\n            onClick: addOption,\n            children: \"+ Add Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: isActive,\n              onChange: e => setIsActive(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), \"Active Poll\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: allowMultipleVotes,\n              onChange: e => setAllowMultipleVotes(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this), \"Allow Multiple Votes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), poll && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"poll-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-content\",\n            dangerouslySetInnerHTML: {\n              __html: questionHtml || questionText\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-options\",\n            children: options.filter(opt => opt.trim()).map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-option\",\n              children: option\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(PollEditor, \"oCTdpn7SM1XKOs/ufV4Xn9johTA=\", false, function () {\n  return [useDispatch, usePollContext];\n});\n_c = PollEditor;\nexport default PollEditor;\nvar _c;\n$RefreshReg$(_c, \"PollEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useDispatch","usePollContext","createPoll","updatePoll","deletePoll","resetPoll","socketService","LexicalEditor","jsxDEV","_jsxDEV","extractPlainFromMaybeJson","str","trimmed","String","trim","startsWith","includes","_json$root","json","JSON","parse","children","root","text","map","node","Array","isArray","c","join","_","PollEditor","poll","onPollSelect","_s","dispatch","settings","questionText","setQuestionText","questionHtml","setQuestionHtml","options","setOptions","isActive","setIsActive","allowMultipleVotes","setAllowMultipleVotes","isSaving","setIsSaving","error","setError","_poll$options","plain","question","opt","handleQuestionChange","html","handleOptionChange","index","value","newOptions","addOption","removeOption","length","filter","i","handleSave","validOptions","pollData","contentType","result","id","_id","unwrap","broadcastPollUpdated","broadcastPollCreated","autoSave","setTimeout","err","message","handleReset","updated","_poll$options2","e","handleDelete","broadcastPollDeleted","initialEditorValue","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","title","_poll$options3","initialValue","onChange","placeholder","option","type","target","checked","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["D:/polleditor-server/polleditor-server/poll-editor/src/components/PollEditor.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { usePollContext } from '../context/PollContext';\r\nimport { createPoll, updatePoll, deletePoll, resetPoll } from '../redux/pollsSlice';\r\nimport socketService from '../socket/socket';\r\nimport LexicalEditor from './LexicalEditor';\r\nimport './PollEditor.css';\r\n\r\nconst extractPlainFromMaybeJson = (str) => {\r\n  if (!str) return '';\r\n  const trimmed = String(str).trim();\r\n  if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\r\n    try {\r\n      const json = JSON.parse(trimmed);\r\n      const children = json?.root?.children || [];\r\n      const text = children\r\n        .map((node) => Array.isArray(node.children) ? node.children.map((c) => c.text || '').join('') : '')\r\n        .join(' ')\r\n        .trim();\r\n      return text || '';\r\n    } catch (_) {\r\n      return '';\r\n    }\r\n  }\r\n  return trimmed;\r\n};\r\n\r\nconst PollEditor = ({ poll, onPollSelect }) => {\r\n  const dispatch = useDispatch();\r\n  const { settings } = usePollContext();\r\n  const [questionText, setQuestionText] = useState('');\r\n  const [questionHtml, setQuestionHtml] = useState('');\r\n  const [options, setOptions] = useState(['', '']);\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [allowMultipleVotes, setAllowMultipleVotes] = useState(true);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Initialize form when poll changes\r\n  useEffect(() => {\r\n    if (poll) {\r\n      const plain = extractPlainFromMaybeJson(poll.question);\r\n      setQuestionText(plain || '');\r\n      setQuestionHtml(poll.questionHtml || '');\r\n      setOptions(poll.options?.map(opt => opt.text) || ['', '']);\r\n      setIsActive(poll.isActive !== false);\r\n      // Ensure proper boolean handling for allowMultipleVotes\r\n      setAllowMultipleVotes(poll.allowMultipleVotes === true || poll.allowMultipleVotes === 'true');\r\n    } else {\r\n      // New poll defaults to 2 empty options\r\n      setQuestionText('');\r\n      setQuestionHtml('');\r\n      setOptions(['', '']);\r\n      setIsActive(true);\r\n      setAllowMultipleVotes(true); // Default to true (checked)\r\n    }\r\n    setError('');\r\n  }, [poll]);\r\n\r\n  const handleQuestionChange = useCallback(({ plain, html }) => {\r\n    setQuestionText(plain || '');\r\n    setQuestionHtml(html || '');\r\n  }, []);\r\n\r\n  const handleOptionChange = (index, value) => {\r\n    const newOptions = [...options];\r\n    newOptions[index] = value;\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const addOption = () => {\r\n    setOptions([...options, '']);\r\n  };\r\n\r\n  const removeOption = (index) => {\r\n    if (options.length > 2) {\r\n      const newOptions = options.filter((_, i) => i !== index);\r\n      setOptions(newOptions);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!questionText.trim()) {\r\n      setError('Question is required');\r\n      return;\r\n    }\r\n\r\n    const validOptions = options.filter(opt => opt.trim());\r\n    if (validOptions.length < 2) {\r\n      setError('At least 2 options are required');\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n    setError('');\r\n\r\n    try {\r\n      const pollData = {\r\n        question: questionText.trim(),\r\n        questionHtml,\r\n        options: validOptions,\r\n        isActive,\r\n        allowMultipleVotes,\r\n        contentType: 'lexical'\r\n      };\r\n\r\n      let result;\r\n      if (poll) {\r\n        // Update existing poll\r\n        result = await dispatch(updatePoll({ id: poll._id, pollData })).unwrap();\r\n        socketService.broadcastPollUpdated(result);\r\n      } else {\r\n        // Create new poll\r\n        result = await dispatch(createPoll(pollData)).unwrap();\r\n        socketService.broadcastPollCreated(result);\r\n        onPollSelect(result);\r\n      }\r\n\r\n      if (settings.autoSave) {\r\n        // Auto-save feedback\r\n        setTimeout(() => {\r\n          setIsSaving(false);\r\n        }, 1000);\r\n      } else {\r\n        setIsSaving(false);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to save poll');\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = async () => {\r\n    try {\r\n      if (poll) {\r\n        const updated = await dispatch(resetPoll(poll._id)).unwrap();\r\n        socketService.broadcastPollUpdated(updated);\r\n      }\r\n      // Reset form values to current poll state or defaults\r\n      if (poll) {\r\n        const plain = extractPlainFromMaybeJson(poll.question);\r\n        setQuestionText(plain || '');\r\n        setQuestionHtml(poll.questionHtml || '');\r\n        setOptions(poll.options?.map(opt => opt.text) || ['', '']);\r\n        setIsActive(poll.isActive !== false);\r\n        setAllowMultipleVotes(poll.allowMultipleVotes === true || poll.allowMultipleVotes === 'true');\r\n      } else {\r\n        setQuestionText('');\r\n        setQuestionHtml('');\r\n        setOptions(['', '']);\r\n        setIsActive(true);\r\n        setAllowMultipleVotes(true);\r\n      }\r\n      setError('');\r\n    } catch (e) {\r\n      setError('Failed to reset poll');\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!poll) return;\r\n    try {\r\n      await dispatch(deletePoll(poll._id)).unwrap();\r\n      socketService.broadcastPollDeleted(poll._id);\r\n      onPollSelect(null);\r\n    } catch (e) {\r\n      setError('Failed to delete poll');\r\n    }\r\n  };\r\n\r\n  // Prefer to seed editor with HTML or plain text; if older polls contain JSON in question, editor handles it, preview uses extracted plain\r\n  const initialEditorValue = poll ? (poll.question || poll.questionHtml || '') : '';\r\n\r\n  return (\r\n    <div className=\"poll-editor\">\r\n      <div className=\"poll-editor-header\">\r\n        <h2>{poll ? 'Edit Poll' : 'Create New Poll'}</h2>\r\n        <div className=\"poll-editor-actions\">\r\n          {poll && (\r\n            <button \r\n              className=\"btn btn-secondary\"\r\n              onClick={handleReset}\r\n              disabled={isSaving}\r\n              title=\"Reset votes\"\r\n            >\r\n              Reset Votes\r\n            </button>\r\n          )}\r\n          <button \r\n            className=\"btn btn-secondary\"\r\n            onClick={() => {\r\n              // revert UI fields to defaults/current\r\n              if (poll) {\r\n                const plain = extractPlainFromMaybeJson(poll.question);\r\n                setQuestionText(plain || '');\r\n                setQuestionHtml(poll.questionHtml || '');\r\n                setOptions(poll.options?.map(opt => opt.text) || ['', '']);\r\n                setIsActive(poll.isActive !== false);\r\n                setAllowMultipleVotes(poll.allowMultipleVotes === true);\r\n              } else {\r\n                setQuestionText('');\r\n                setQuestionHtml('');\r\n                        setOptions(['', '']);\r\n        setIsActive(true);\r\n        setAllowMultipleVotes(true);\r\n              }\r\n            }}\r\n            disabled={isSaving}\r\n          >\r\n            Reset Form\r\n          </button>\r\n          {poll && (\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={handleDelete}\r\n              disabled={isSaving}\r\n              title=\"Delete poll\"\r\n            >\r\n              Delete\r\n            </button>\r\n          )}\r\n          <button \r\n            className=\"btn btn-success\"\r\n            onClick={handleSave}\r\n            disabled={isSaving}\r\n          >\r\n            {isSaving ? 'Saving...' : (poll ? 'Update' : 'Create')}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"poll-editor-content\">\r\n        <div className=\"form-section\">\r\n          <label className=\"form-label\">Question</label>\r\n          <div className=\"lexical-editor-container\">\r\n            <LexicalEditor\r\n              initialValue={initialEditorValue}\r\n              onChange={handleQuestionChange}\r\n              placeholder=\"Enter your poll question...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <label className=\"form-label\">Options</label>\r\n          <div className=\"options-container\">\r\n            {options.map((option, index) => (\r\n              <div key={index} className=\"option-input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input option-input\"\r\n                  value={option}\r\n                  onChange={(e) => handleOptionChange(index, e.target.value)}\r\n                  placeholder={`Option ${index + 1}`}\r\n                />\r\n                {options.length > 2 && (\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-remove\"\r\n                    onClick={() => removeOption(index)}\r\n                    title=\"Remove option\"\r\n                  >\r\n                    ×\r\n                  </button>\r\n                )}\r\n              </div>\r\n            ))}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary btn-add-option\"\r\n              onClick={addOption}\r\n            >\r\n              + Add Option\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <label className=\"form-label\">Settings</label>\r\n          <div className=\"settings-group\">\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isActive}\r\n                onChange={(e) => setIsActive(e.target.checked)}\r\n              />\r\n              Active Poll\r\n            </label>\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={allowMultipleVotes}\r\n                onChange={(e) => setAllowMultipleVotes(e.target.checked)}\r\n              />\r\n              Allow Multiple Votes\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        {poll && (\r\n          <div className=\"form-section\">\r\n            <label className=\"form-label\">Preview</label>\r\n            <div className=\"poll-preview\">\r\n              <div className=\"preview-content\" dangerouslySetInnerHTML={{ __html: questionHtml || questionText }} />\r\n              <div className=\"preview-options\">\r\n                {options.filter(opt => opt.trim()).map((option, index) => (\r\n                  <div key={index} className=\"preview-option\">\r\n                    {option}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PollEditor;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,qBAAqB;AACnF,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,yBAAyB,GAAIC,GAAG,IAAK;EACzC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EACnB,MAAMC,OAAO,GAAGC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAAC,CAAC;EAClC,IAAIF,OAAO,CAACG,UAAU,CAAC,GAAG,CAAC,IAAIH,OAAO,CAACI,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACzD,IAAI;MAAA,IAAAC,UAAA;MACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACR,OAAO,CAAC;MAChC,MAAMS,QAAQ,GAAG,CAAAH,IAAI,aAAJA,IAAI,wBAAAD,UAAA,GAAJC,IAAI,CAAEI,IAAI,cAAAL,UAAA,uBAAVA,UAAA,CAAYI,QAAQ,KAAI,EAAE;MAC3C,MAAME,IAAI,GAAGF,QAAQ,CAClBG,GAAG,CAAEC,IAAI,IAAKC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACJ,QAAQ,CAAC,GAAGI,IAAI,CAACJ,QAAQ,CAACG,GAAG,CAAEI,CAAC,IAAKA,CAAC,CAACL,IAAI,IAAI,EAAE,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAClGA,IAAI,CAAC,GAAG,CAAC,CACTf,IAAI,CAAC,CAAC;MACT,OAAOS,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOO,CAAC,EAAE;MACV,OAAO,EAAE;IACX;EACF;EACA,OAAOlB,OAAO;AAChB,CAAC;AAED,MAAMmB,UAAU,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAMC,QAAQ,GAAGnC,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEoC;EAAS,CAAC,GAAGnC,cAAc,CAAC,CAAC;EACrC,MAAM,CAACoC,YAAY,EAAEC,eAAe,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC0C,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC4C,OAAO,EAAEC,UAAU,CAAC,GAAG7C,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EAChD,MAAM,CAAC8C,QAAQ,EAAEC,WAAW,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACkD,QAAQ,EAAEC,WAAW,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACoD,KAAK,EAAEC,QAAQ,CAAC,GAAGrD,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,IAAIkC,IAAI,EAAE;MAAA,IAAAmB,aAAA;MACR,MAAMC,KAAK,GAAG1C,yBAAyB,CAACsB,IAAI,CAACqB,QAAQ,CAAC;MACtDf,eAAe,CAACc,KAAK,IAAI,EAAE,CAAC;MAC5BZ,eAAe,CAACR,IAAI,CAACO,YAAY,IAAI,EAAE,CAAC;MACxCG,UAAU,CAAC,EAAAS,aAAA,GAAAnB,IAAI,CAACS,OAAO,cAAAU,aAAA,uBAAZA,aAAA,CAAc3B,GAAG,CAAC8B,GAAG,IAAIA,GAAG,CAAC/B,IAAI,CAAC,KAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;MAC1DqB,WAAW,CAACZ,IAAI,CAACW,QAAQ,KAAK,KAAK,CAAC;MACpC;MACAG,qBAAqB,CAACd,IAAI,CAACa,kBAAkB,KAAK,IAAI,IAAIb,IAAI,CAACa,kBAAkB,KAAK,MAAM,CAAC;IAC/F,CAAC,MAAM;MACL;MACAP,eAAe,CAAC,EAAE,CAAC;MACnBE,eAAe,CAAC,EAAE,CAAC;MACnBE,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;MACpBE,WAAW,CAAC,IAAI,CAAC;MACjBE,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B;IACAI,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC,EAAE,CAAClB,IAAI,CAAC,CAAC;EAEV,MAAMuB,oBAAoB,GAAGxD,WAAW,CAAC,CAAC;IAAEqD,KAAK;IAAEI;EAAK,CAAC,KAAK;IAC5DlB,eAAe,CAACc,KAAK,IAAI,EAAE,CAAC;IAC5BZ,eAAe,CAACgB,IAAI,IAAI,EAAE,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC3C,MAAMC,UAAU,GAAG,CAAC,GAAGnB,OAAO,CAAC;IAC/BmB,UAAU,CAACF,KAAK,CAAC,GAAGC,KAAK;IACzBjB,UAAU,CAACkB,UAAU,CAAC;EACxB,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtBnB,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE,EAAE,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMqB,YAAY,GAAIJ,KAAK,IAAK;IAC9B,IAAIjB,OAAO,CAACsB,MAAM,GAAG,CAAC,EAAE;MACtB,MAAMH,UAAU,GAAGnB,OAAO,CAACuB,MAAM,CAAC,CAAClC,CAAC,EAAEmC,CAAC,KAAKA,CAAC,KAAKP,KAAK,CAAC;MACxDhB,UAAU,CAACkB,UAAU,CAAC;IACxB;EACF,CAAC;EAED,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAAC7B,YAAY,CAACvB,IAAI,CAAC,CAAC,EAAE;MACxBoC,QAAQ,CAAC,sBAAsB,CAAC;MAChC;IACF;IAEA,MAAMiB,YAAY,GAAG1B,OAAO,CAACuB,MAAM,CAACV,GAAG,IAAIA,GAAG,CAACxC,IAAI,CAAC,CAAC,CAAC;IACtD,IAAIqD,YAAY,CAACJ,MAAM,GAAG,CAAC,EAAE;MAC3Bb,QAAQ,CAAC,iCAAiC,CAAC;MAC3C;IACF;IAEAF,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMkB,QAAQ,GAAG;QACff,QAAQ,EAAEhB,YAAY,CAACvB,IAAI,CAAC,CAAC;QAC7ByB,YAAY;QACZE,OAAO,EAAE0B,YAAY;QACrBxB,QAAQ;QACRE,kBAAkB;QAClBwB,WAAW,EAAE;MACf,CAAC;MAED,IAAIC,MAAM;MACV,IAAItC,IAAI,EAAE;QACR;QACAsC,MAAM,GAAG,MAAMnC,QAAQ,CAAChC,UAAU,CAAC;UAAEoE,EAAE,EAAEvC,IAAI,CAACwC,GAAG;UAAEJ;QAAS,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC,CAAC;QACxEnE,aAAa,CAACoE,oBAAoB,CAACJ,MAAM,CAAC;MAC5C,CAAC,MAAM;QACL;QACAA,MAAM,GAAG,MAAMnC,QAAQ,CAACjC,UAAU,CAACkE,QAAQ,CAAC,CAAC,CAACK,MAAM,CAAC,CAAC;QACtDnE,aAAa,CAACqE,oBAAoB,CAACL,MAAM,CAAC;QAC1CrC,YAAY,CAACqC,MAAM,CAAC;MACtB;MAEA,IAAIlC,QAAQ,CAACwC,QAAQ,EAAE;QACrB;QACAC,UAAU,CAAC,MAAM;UACf7B,WAAW,CAAC,KAAK,CAAC;QACpB,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,MAAM;QACLA,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC,CAAC,OAAO8B,GAAG,EAAE;MACZ5B,QAAQ,CAAC4B,GAAG,CAACC,OAAO,IAAI,qBAAqB,CAAC;MAC9C/B,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMgC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,IAAIhD,IAAI,EAAE;QACR,MAAMiD,OAAO,GAAG,MAAM9C,QAAQ,CAAC9B,SAAS,CAAC2B,IAAI,CAACwC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;QAC5DnE,aAAa,CAACoE,oBAAoB,CAACO,OAAO,CAAC;MAC7C;MACA;MACA,IAAIjD,IAAI,EAAE;QAAA,IAAAkD,cAAA;QACR,MAAM9B,KAAK,GAAG1C,yBAAyB,CAACsB,IAAI,CAACqB,QAAQ,CAAC;QACtDf,eAAe,CAACc,KAAK,IAAI,EAAE,CAAC;QAC5BZ,eAAe,CAACR,IAAI,CAACO,YAAY,IAAI,EAAE,CAAC;QACxCG,UAAU,CAAC,EAAAwC,cAAA,GAAAlD,IAAI,CAACS,OAAO,cAAAyC,cAAA,uBAAZA,cAAA,CAAc1D,GAAG,CAAC8B,GAAG,IAAIA,GAAG,CAAC/B,IAAI,CAAC,KAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1DqB,WAAW,CAACZ,IAAI,CAACW,QAAQ,KAAK,KAAK,CAAC;QACpCG,qBAAqB,CAACd,IAAI,CAACa,kBAAkB,KAAK,IAAI,IAAIb,IAAI,CAACa,kBAAkB,KAAK,MAAM,CAAC;MAC/F,CAAC,MAAM;QACLP,eAAe,CAAC,EAAE,CAAC;QACnBE,eAAe,CAAC,EAAE,CAAC;QACnBE,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACpBE,WAAW,CAAC,IAAI,CAAC;QACjBE,qBAAqB,CAAC,IAAI,CAAC;MAC7B;MACAI,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOiC,CAAC,EAAE;MACVjC,QAAQ,CAAC,sBAAsB,CAAC;IAClC;EACF,CAAC;EAED,MAAMkC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACpD,IAAI,EAAE;IACX,IAAI;MACF,MAAMG,QAAQ,CAAC/B,UAAU,CAAC4B,IAAI,CAACwC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;MAC7CnE,aAAa,CAAC+E,oBAAoB,CAACrD,IAAI,CAACwC,GAAG,CAAC;MAC5CvC,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOkD,CAAC,EAAE;MACVjC,QAAQ,CAAC,uBAAuB,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMoC,kBAAkB,GAAGtD,IAAI,GAAIA,IAAI,CAACqB,QAAQ,IAAIrB,IAAI,CAACO,YAAY,IAAI,EAAE,GAAI,EAAE;EAEjF,oBACE9B,OAAA;IAAK8E,SAAS,EAAC,aAAa;IAAAlE,QAAA,gBAC1BZ,OAAA;MAAK8E,SAAS,EAAC,oBAAoB;MAAAlE,QAAA,gBACjCZ,OAAA;QAAAY,QAAA,EAAKW,IAAI,GAAG,WAAW,GAAG;MAAiB;QAAAwD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACjDlF,OAAA;QAAK8E,SAAS,EAAC,qBAAqB;QAAAlE,QAAA,GACjCW,IAAI,iBACHvB,OAAA;UACE8E,SAAS,EAAC,mBAAmB;UAC7BK,OAAO,EAAEZ,WAAY;UACrBa,QAAQ,EAAE9C,QAAS;UACnB+C,KAAK,EAAC,aAAa;UAAAzE,QAAA,EACpB;QAED;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT,eACDlF,OAAA;UACE8E,SAAS,EAAC,mBAAmB;UAC7BK,OAAO,EAAEA,CAAA,KAAM;YACb;YACA,IAAI5D,IAAI,EAAE;cAAA,IAAA+D,cAAA;cACR,MAAM3C,KAAK,GAAG1C,yBAAyB,CAACsB,IAAI,CAACqB,QAAQ,CAAC;cACtDf,eAAe,CAACc,KAAK,IAAI,EAAE,CAAC;cAC5BZ,eAAe,CAACR,IAAI,CAACO,YAAY,IAAI,EAAE,CAAC;cACxCG,UAAU,CAAC,EAAAqD,cAAA,GAAA/D,IAAI,CAACS,OAAO,cAAAsD,cAAA,uBAAZA,cAAA,CAAcvE,GAAG,CAAC8B,GAAG,IAAIA,GAAG,CAAC/B,IAAI,CAAC,KAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;cAC1DqB,WAAW,CAACZ,IAAI,CAACW,QAAQ,KAAK,KAAK,CAAC;cACpCG,qBAAqB,CAACd,IAAI,CAACa,kBAAkB,KAAK,IAAI,CAAC;YACzD,CAAC,MAAM;cACLP,eAAe,CAAC,EAAE,CAAC;cACnBE,eAAe,CAAC,EAAE,CAAC;cACXE,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;cACpCE,WAAW,CAAC,IAAI,CAAC;cACjBE,qBAAqB,CAAC,IAAI,CAAC;YACrB;UACF,CAAE;UACF+C,QAAQ,EAAE9C,QAAS;UAAA1B,QAAA,EACpB;QAED;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACR3D,IAAI,iBACHvB,OAAA;UACE8E,SAAS,EAAC,gBAAgB;UAC1BK,OAAO,EAAER,YAAa;UACtBS,QAAQ,EAAE9C,QAAS;UACnB+C,KAAK,EAAC,aAAa;UAAAzE,QAAA,EACpB;QAED;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT,eACDlF,OAAA;UACE8E,SAAS,EAAC,iBAAiB;UAC3BK,OAAO,EAAE1B,UAAW;UACpB2B,QAAQ,EAAE9C,QAAS;UAAA1B,QAAA,EAElB0B,QAAQ,GAAG,WAAW,GAAIf,IAAI,GAAG,QAAQ,GAAG;QAAS;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL1C,KAAK,iBACJxC,OAAA;MAAK8E,SAAS,EAAC,eAAe;MAAAlE,QAAA,EAC3B4B;IAAK;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDlF,OAAA;MAAK8E,SAAS,EAAC,qBAAqB;MAAAlE,QAAA,gBAClCZ,OAAA;QAAK8E,SAAS,EAAC,cAAc;QAAAlE,QAAA,gBAC3BZ,OAAA;UAAO8E,SAAS,EAAC,YAAY;UAAAlE,QAAA,EAAC;QAAQ;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9ClF,OAAA;UAAK8E,SAAS,EAAC,0BAA0B;UAAAlE,QAAA,eACvCZ,OAAA,CAACF,aAAa;YACZyF,YAAY,EAAEV,kBAAmB;YACjCW,QAAQ,EAAE1C,oBAAqB;YAC/B2C,WAAW,EAAC;UAA6B;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENlF,OAAA;QAAK8E,SAAS,EAAC,cAAc;QAAAlE,QAAA,gBAC3BZ,OAAA;UAAO8E,SAAS,EAAC,YAAY;UAAAlE,QAAA,EAAC;QAAO;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC7ClF,OAAA;UAAK8E,SAAS,EAAC,mBAAmB;UAAAlE,QAAA,GAC/BoB,OAAO,CAACjB,GAAG,CAAC,CAAC2E,MAAM,EAAEzC,KAAK,kBACzBjD,OAAA;YAAiB8E,SAAS,EAAC,oBAAoB;YAAAlE,QAAA,gBAC7CZ,OAAA;cACE2F,IAAI,EAAC,MAAM;cACXb,SAAS,EAAC,oBAAoB;cAC9B5B,KAAK,EAAEwC,MAAO;cACdF,QAAQ,EAAGd,CAAC,IAAK1B,kBAAkB,CAACC,KAAK,EAAEyB,CAAC,CAACkB,MAAM,CAAC1C,KAAK,CAAE;cAC3DuC,WAAW,EAAE,UAAUxC,KAAK,GAAG,CAAC;YAAG;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC,CAAC,EACDlD,OAAO,CAACsB,MAAM,GAAG,CAAC,iBACjBtD,OAAA;cACE2F,IAAI,EAAC,QAAQ;cACbb,SAAS,EAAC,gBAAgB;cAC1BK,OAAO,EAAEA,CAAA,KAAM9B,YAAY,CAACJ,KAAK,CAAE;cACnCoC,KAAK,EAAC,eAAe;cAAAzE,QAAA,EACtB;YAED;cAAAmE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACT;UAAA,GAjBOjC,KAAK;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAkBV,CACN,CAAC,eACFlF,OAAA;YACE2F,IAAI,EAAC,QAAQ;YACbb,SAAS,EAAC,kCAAkC;YAC5CK,OAAO,EAAE/B,SAAU;YAAAxC,QAAA,EACpB;UAED;YAAAmE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENlF,OAAA;QAAK8E,SAAS,EAAC,cAAc;QAAAlE,QAAA,gBAC3BZ,OAAA;UAAO8E,SAAS,EAAC,YAAY;UAAAlE,QAAA,EAAC;QAAQ;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9ClF,OAAA;UAAK8E,SAAS,EAAC,gBAAgB;UAAAlE,QAAA,gBAC7BZ,OAAA;YAAO8E,SAAS,EAAC,gBAAgB;YAAAlE,QAAA,gBAC/BZ,OAAA;cACE2F,IAAI,EAAC,UAAU;cACfE,OAAO,EAAE3D,QAAS;cAClBsD,QAAQ,EAAGd,CAAC,IAAKvC,WAAW,CAACuC,CAAC,CAACkB,MAAM,CAACC,OAAO;YAAE;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC,eAEJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACRlF,OAAA;YAAO8E,SAAS,EAAC,gBAAgB;YAAAlE,QAAA,gBAC/BZ,OAAA;cACE2F,IAAI,EAAC,UAAU;cACfE,OAAO,EAAEzD,kBAAmB;cAC5BoD,QAAQ,EAAGd,CAAC,IAAKrC,qBAAqB,CAACqC,CAAC,CAACkB,MAAM,CAACC,OAAO;YAAE;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1D,CAAC,wBAEJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAEL3D,IAAI,iBACHvB,OAAA;QAAK8E,SAAS,EAAC,cAAc;QAAAlE,QAAA,gBAC3BZ,OAAA;UAAO8E,SAAS,EAAC,YAAY;UAAAlE,QAAA,EAAC;QAAO;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC7ClF,OAAA;UAAK8E,SAAS,EAAC,cAAc;UAAAlE,QAAA,gBAC3BZ,OAAA;YAAK8E,SAAS,EAAC,iBAAiB;YAACgB,uBAAuB,EAAE;cAAEC,MAAM,EAAEjE,YAAY,IAAIF;YAAa;UAAE;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACtGlF,OAAA;YAAK8E,SAAS,EAAC,iBAAiB;YAAAlE,QAAA,EAC7BoB,OAAO,CAACuB,MAAM,CAACV,GAAG,IAAIA,GAAG,CAACxC,IAAI,CAAC,CAAC,CAAC,CAACU,GAAG,CAAC,CAAC2E,MAAM,EAAEzC,KAAK,kBACnDjD,OAAA;cAAiB8E,SAAS,EAAC,gBAAgB;cAAAlE,QAAA,EACxC8E;YAAM,GADCzC,KAAK;cAAA8B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEV,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzD,EAAA,CAxSIH,UAAU;EAAA,QACG/B,WAAW,EACPC,cAAc;AAAA;AAAAwG,EAAA,GAF/B1E,UAAU;AA0ShB,eAAeA,UAAU;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}