{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunks for API calls\nexport const fetchPolls = createAsyncThunk('polls/fetchPolls', async () => {\n  const response = await axios.get('/api/polls');\n  return response.data;\n});\nexport const createPoll = createAsyncThunk('polls/createPoll', async pollData => {\n  const response = await axios.post('/api/polls', pollData);\n  return response.data;\n});\nexport const updatePoll = createAsyncThunk('polls/updatePoll', async ({\n  id,\n  pollData\n}) => {\n  const response = await axios.put(`/api/polls/${id}`, pollData);\n  return response.data;\n});\nexport const votePoll = createAsyncThunk('polls/votePoll', async ({\n  pollId,\n  optionId\n}) => {\n  const response = await axios.post(`/api/polls/${pollId}/vote`, {\n    optionId\n  });\n  return response.data;\n});\nexport const deletePoll = createAsyncThunk('polls/deletePoll', async pollId => {\n  const response = await axios.delete(`/api/polls/${pollId}`);\n  return {\n    pollId,\n    ...response.data\n  };\n});\nexport const resetPoll = createAsyncThunk('polls/resetPoll', async pollId => {\n  const response = await axios.post(`/api/polls/${pollId}/reset`);\n  return response.data;\n});\nconst pollsSlice = createSlice({\n  name: 'polls',\n  initialState: {\n    polls: [],\n    currentPoll: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    setCurrentPoll: (state, action) => {\n      state.currentPoll = action.payload;\n    },\n    updatePollInStore: (state, action) => {\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\n        state.currentPoll = action.payload;\n      }\n    },\n    addPollToStore: (state, action) => {\n      state.polls.unshift(action.payload);\n    },\n    removePollFromStore: (state, action) => {\n      const pollId = action.payload;\n      state.polls = state.polls.filter(p => p._id !== pollId);\n      if (state.currentPoll && state.currentPoll._id === pollId) {\n        state.currentPoll = null;\n      }\n    },\n    // Optimistic vote update (increment a local copy until server confirms)\n    incrementVoteOptimistic: (state, action) => {\n      const {\n        pollId,\n        optionId\n      } = action.payload;\n      const poll = state.polls.find(p => p._id === pollId);\n      if (!poll) return;\n      const option = poll.options.find(o => o._id === optionId);\n      if (!option) return;\n      option.votes += 1;\n      poll.totalVotes += 1;\n      if (state.currentPoll && state.currentPoll._id === pollId) {\n        state.currentPoll = {\n          ...poll\n        };\n      }\n    },\n    // Optimistic vote decrement (when user removes their vote)\n    decrementVoteOptimistic: (state, action) => {\n      const {\n        pollId,\n        optionId\n      } = action.payload;\n      const poll = state.polls.find(p => p._id === pollId);\n      if (!poll) return;\n      const option = poll.options.find(o => o._id === optionId);\n      if (!option) return;\n      option.votes = Math.max(0, option.votes - 1);\n      poll.totalVotes = Math.max(0, poll.totalVotes - 1);\n      if (state.currentPoll && state.currentPoll._id === pollId) {\n        state.currentPoll = {\n          ...poll\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch polls\n    .addCase(fetchPolls.pending, state => {\n      state.loading = true;\n    }).addCase(fetchPolls.fulfilled, (state, action) => {\n      state.loading = false;\n      state.polls = action.payload;\n      state.error = null;\n    }).addCase(fetchPolls.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // Create poll\n    .addCase(createPoll.fulfilled, (state, action) => {\n      state.polls.unshift(action.payload);\n    })\n    // Update poll\n    .addCase(updatePoll.fulfilled, (state, action) => {\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n    })\n    // Vote poll (server confirmation)\n    .addCase(votePoll.fulfilled, (state, action) => {\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\n        state.currentPoll = action.payload;\n      }\n    })\n    // Delete poll\n    .addCase(deletePoll.fulfilled, (state, action) => {\n      const pollId = action.payload.pollId;\n      state.polls = state.polls.filter(p => p._id !== pollId);\n      if (state.currentPoll && state.currentPoll._id === pollId) {\n        state.currentPoll = null;\n      }\n    })\n    // Reset poll\n    .addCase(resetPoll.fulfilled, (state, action) => {\n      const index = state.polls.findIndex(p => p._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\n        state.currentPoll = action.payload;\n      }\n    });\n  }\n});\nexport const {\n  setCurrentPoll,\n  updatePollInStore,\n  addPollToStore,\n  removePollFromStore,\n  incrementVoteOptimistic,\n  decrementVoteOptimistic\n} = pollsSlice.actions;\nexport default pollsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchPolls","response","get","data","createPoll","pollData","post","updatePoll","id","put","votePoll","pollId","optionId","deletePoll","delete","resetPoll","pollsSlice","name","initialState","polls","currentPoll","loading","error","reducers","setCurrentPoll","state","action","payload","updatePollInStore","index","findIndex","poll","_id","addPollToStore","unshift","removePollFromStore","filter","p","incrementVoteOptimistic","find","option","options","o","votes","totalVotes","decrementVoteOptimistic","Math","max","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["D:/server/poll-editor/src/redux/pollsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Async thunks for API calls\r\nexport const fetchPolls = createAsyncThunk(\r\n  'polls/fetchPolls',\r\n  async () => {\r\n    const response = await axios.get('/api/polls');\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const createPoll = createAsyncThunk(\r\n  'polls/createPoll',\r\n  async (pollData) => {\r\n    const response = await axios.post('/api/polls', pollData);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updatePoll = createAsyncThunk(\r\n  'polls/updatePoll',\r\n  async ({ id, pollData }) => {\r\n    const response = await axios.put(`/api/polls/${id}`, pollData);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const votePoll = createAsyncThunk(\r\n  'polls/votePoll',\r\n  async ({ pollId, optionId }) => {\r\n    const response = await axios.post(`/api/polls/${pollId}/vote`, { optionId });\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const deletePoll = createAsyncThunk(\r\n  'polls/deletePoll',\r\n  async (pollId) => {\r\n    const response = await axios.delete(`/api/polls/${pollId}`);\r\n    return { pollId, ...response.data };\r\n  }\r\n);\r\n\r\nexport const resetPoll = createAsyncThunk(\r\n  'polls/resetPoll',\r\n  async (pollId) => {\r\n    const response = await axios.post(`/api/polls/${pollId}/reset`);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst pollsSlice = createSlice({\r\n  name: 'polls',\r\n  initialState: {\r\n    polls: [],\r\n    currentPoll: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    setCurrentPoll: (state, action) => {\r\n      state.currentPoll = action.payload;\r\n    },\r\n    updatePollInStore: (state, action) => {\r\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\r\n      if (index !== -1) {\r\n        state.polls[index] = action.payload;\r\n      }\r\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\r\n        state.currentPoll = action.payload;\r\n      }\r\n    },\r\n    addPollToStore: (state, action) => {\r\n      state.polls.unshift(action.payload);\r\n    },\r\n    removePollFromStore: (state, action) => {\r\n      const pollId = action.payload;\r\n      state.polls = state.polls.filter(p => p._id !== pollId);\r\n      if (state.currentPoll && state.currentPoll._id === pollId) {\r\n        state.currentPoll = null;\r\n      }\r\n    },\r\n    // Optimistic vote update (increment a local copy until server confirms)\r\n    incrementVoteOptimistic: (state, action) => {\r\n      const { pollId, optionId } = action.payload;\r\n      const poll = state.polls.find(p => p._id === pollId);\r\n      if (!poll) return;\r\n      const option = poll.options.find(o => o._id === optionId);\r\n      if (!option) return;\r\n      option.votes += 1;\r\n      poll.totalVotes += 1;\r\n      if (state.currentPoll && state.currentPoll._id === pollId) {\r\n        state.currentPoll = { ...poll };\r\n      }\r\n    },\r\n    // Optimistic vote decrement (when user removes their vote)\r\n    decrementVoteOptimistic: (state, action) => {\r\n      const { pollId, optionId } = action.payload;\r\n      const poll = state.polls.find(p => p._id === pollId);\r\n      if (!poll) return;\r\n      const option = poll.options.find(o => o._id === optionId);\r\n      if (!option) return;\r\n      option.votes = Math.max(0, option.votes - 1);\r\n      poll.totalVotes = Math.max(0, poll.totalVotes - 1);\r\n      if (state.currentPoll && state.currentPoll._id === pollId) {\r\n        state.currentPoll = { ...poll };\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch polls\r\n      .addCase(fetchPolls.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchPolls.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.polls = action.payload;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchPolls.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      // Create poll\r\n      .addCase(createPoll.fulfilled, (state, action) => {\r\n        state.polls.unshift(action.payload);\r\n      })\r\n      // Update poll\r\n      .addCase(updatePoll.fulfilled, (state, action) => {\r\n        const index = state.polls.findIndex(poll => poll._id === action.payload._id);\r\n        if (index !== -1) {\r\n          state.polls[index] = action.payload;\r\n        }\r\n      })\r\n      // Vote poll (server confirmation)\r\n      .addCase(votePoll.fulfilled, (state, action) => {\r\n        const index = state.polls.findIndex(poll => poll._id === action.payload._id);\r\n        if (index !== -1) {\r\n          state.polls[index] = action.payload;\r\n        }\r\n        if (state.currentPoll && state.currentPoll._id === action.payload._id) {\r\n          state.currentPoll = action.payload;\r\n        }\r\n      })\r\n      // Delete poll\r\n      .addCase(deletePoll.fulfilled, (state, action) => {\r\n        const pollId = action.payload.pollId;\r\n        state.polls = state.polls.filter(p => p._id !== pollId);\r\n        if (state.currentPoll && state.currentPoll._id === pollId) {\r\n          state.currentPoll = null;\r\n        }\r\n      })\r\n      // Reset poll\r\n      .addCase(resetPoll.fulfilled, (state, action) => {\r\n        const index = state.polls.findIndex(p => p._id === action.payload._id);\r\n        if (index !== -1) {\r\n          state.polls[index] = action.payload;\r\n        }\r\n        if (state.currentPoll && state.currentPoll._id === action.payload._id) {\r\n          state.currentPoll = action.payload;\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setCurrentPoll, updatePollInStore, addPollToStore, removePollFromStore, incrementVoteOptimistic, decrementVoteOptimistic } = pollsSlice.actions;\r\nexport default pollsSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}