{"ast":null,"code":"var _jsxFileName = \"D:\\\\server\\\\poll-editor\\\\src\\\\components\\\\PollEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { usePollContext } from '../context/PollContext';\nimport { createPoll, updatePoll, deletePoll, resetPoll } from '../redux/pollsSlice';\nimport socketService from '../socket/socket';\nimport LexicalEditor from './LexicalEditor';\nimport './PollEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PollEditor = ({\n  poll,\n  onPollSelect\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    settings\n  } = usePollContext();\n  const [question, setQuestion] = useState('');\n  const [options, setOptions] = useState(['', '']);\n  const [isActive, setIsActive] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState('');\n\n  // Initialize form when poll changes\n  useEffect(() => {\n    if (poll) {\n      var _poll$options;\n      setQuestion(poll.question || '');\n      setOptions(((_poll$options = poll.options) === null || _poll$options === void 0 ? void 0 : _poll$options.map(opt => opt.text)) || ['', '']);\n      setIsActive(poll.isActive !== false);\n    } else {\n      // New poll defaults to 2 empty options\n      setQuestion('');\n      setOptions(['', '']);\n      setIsActive(true);\n    }\n    setError('');\n  }, [poll]);\n  const handleQuestionChange = useCallback(editorState => {\n    setQuestion(JSON.stringify(editorState));\n  }, []);\n  const handleOptionChange = (index, value) => {\n    const newOptions = [...options];\n    newOptions[index] = value;\n    setOptions(newOptions);\n  };\n  const addOption = () => {\n    setOptions([...options, '']);\n  };\n  const removeOption = index => {\n    if (options.length > 2) {\n      const newOptions = options.filter((_, i) => i !== index);\n      setOptions(newOptions);\n    }\n  };\n  const handleSave = async () => {\n    if (!question.trim()) {\n      setError('Question is required');\n      return;\n    }\n    const validOptions = options.filter(opt => opt.trim());\n    if (validOptions.length < 2) {\n      setError('At least 2 options are required');\n      return;\n    }\n    setIsSaving(true);\n    setError('');\n    try {\n      const pollData = {\n        question,\n        options: validOptions,\n        isActive,\n        contentType: 'lexical'\n      };\n      let result;\n      if (poll) {\n        // Update existing poll\n        result = await dispatch(updatePoll({\n          id: poll._id,\n          pollData\n        })).unwrap();\n        socketService.broadcastPollUpdated(result);\n      } else {\n        // Create new poll\n        result = await dispatch(createPoll(pollData)).unwrap();\n        socketService.broadcastPollCreated(result);\n        onPollSelect(result);\n      }\n      if (settings.autoSave) {\n        // Auto-save feedback\n        setTimeout(() => {\n          setIsSaving(false);\n        }, 1000);\n      } else {\n        setIsSaving(false);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to save poll');\n      setIsSaving(false);\n    }\n  };\n  const handleReset = async () => {\n    try {\n      if (poll) {\n        const updated = await dispatch(resetPoll(poll._id)).unwrap();\n        socketService.broadcastPollUpdated(updated);\n      }\n      // Reset form values to current poll state or defaults\n      if (poll) {\n        var _poll$options2;\n        setQuestion(poll.question || '');\n        setOptions(((_poll$options2 = poll.options) === null || _poll$options2 === void 0 ? void 0 : _poll$options2.map(opt => opt.text)) || ['', '']);\n        setIsActive(poll.isActive !== false);\n      } else {\n        setQuestion('');\n        setOptions(['', '']);\n        setIsActive(true);\n      }\n      setError('');\n    } catch (e) {\n      setError('Failed to reset poll');\n    }\n  };\n  const handleDelete = async () => {\n    if (!poll) return;\n    try {\n      await dispatch(deletePoll(poll._id)).unwrap();\n      socketService.broadcastPollDeleted(poll._id);\n      onPollSelect(null);\n    } catch (e) {\n      setError('Failed to delete poll');\n    }\n  };\n  const getQuestionText = () => {\n    try {\n      const questionData = JSON.parse(question);\n      if (questionData.root && questionData.root.children) {\n        return questionData.root.children.map(child => {\n          var _child$children;\n          return ((_child$children = child.children) === null || _child$children === void 0 ? void 0 : _child$children.map(c => c.text).join('')) || '';\n        }).join(' ');\n      }\n    } catch (e) {\n      return question;\n    }\n    return 'Untitled Poll';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll-editor\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-editor-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: poll ? 'Edit Poll' : 'Create New Poll'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-editor-actions\",\n        children: [poll && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: handleReset,\n          disabled: isSaving,\n          title: \"Reset votes\",\n          children: \"Reset Votes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => {\n            // revert UI fields to defaults/current\n            if (poll) {\n              var _poll$options3;\n              setQuestion(poll.question || '');\n              setOptions(((_poll$options3 = poll.options) === null || _poll$options3 === void 0 ? void 0 : _poll$options3.map(opt => opt.text)) || ['', '']);\n              setIsActive(poll.isActive !== false);\n            } else {\n              setQuestion('');\n              setOptions(['', '']);\n              setIsActive(true);\n            }\n          },\n          disabled: isSaving,\n          children: \"Reset Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), poll && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: handleDelete,\n          disabled: isSaving,\n          title: \"Delete poll\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: handleSave,\n          disabled: isSaving,\n          children: isSaving ? 'Saving...' : poll ? 'Update' : 'Create'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-editor-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lexical-editor-container\",\n          children: /*#__PURE__*/_jsxDEV(LexicalEditor, {\n            initialValue: question,\n            onChange: handleQuestionChange,\n            placeholder: \"Enter your poll question...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option-input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input option-input\",\n              value: option,\n              onChange: e => handleOptionChange(index, e.target.value),\n              placeholder: `Option ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), options.length > 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-remove\",\n              onClick: () => removeOption(index),\n              title: \"Remove option\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-secondary btn-add-option\",\n            onClick: addOption,\n            children: \"+ Add Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: isActive,\n              onChange: e => setIsActive(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), \"Active Poll\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), poll && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: getQuestionText()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-options\",\n            children: options.filter(opt => opt.trim()).map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-option\",\n              children: option\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(PollEditor, \"ot4GQjnyrThCmXTDGW7Olwvy0Uk=\", false, function () {\n  return [useDispatch, usePollContext];\n});\n_c = PollEditor;\nexport default PollEditor;\nvar _c;\n$RefreshReg$(_c, \"PollEditor\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useDispatch","usePollContext","createPoll","updatePoll","deletePoll","resetPoll","socketService","LexicalEditor","jsxDEV","_jsxDEV","PollEditor","poll","onPollSelect","_s","dispatch","settings","question","setQuestion","options","setOptions","isActive","setIsActive","isSaving","setIsSaving","error","setError","_poll$options","map","opt","text","handleQuestionChange","editorState","JSON","stringify","handleOptionChange","index","value","newOptions","addOption","removeOption","length","filter","_","i","handleSave","trim","validOptions","pollData","contentType","result","id","_id","unwrap","broadcastPollUpdated","broadcastPollCreated","autoSave","setTimeout","err","message","handleReset","updated","_poll$options2","e","handleDelete","broadcastPollDeleted","getQuestionText","questionData","parse","root","children","child","_child$children","c","join","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","title","_poll$options3","initialValue","onChange","placeholder","option","type","target","checked","_c","$RefreshReg$"],"sources":["D:/server/poll-editor/src/components/PollEditor.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { usePollContext } from '../context/PollContext';\r\nimport { createPoll, updatePoll, deletePoll, resetPoll } from '../redux/pollsSlice';\r\nimport socketService from '../socket/socket';\r\nimport LexicalEditor from './LexicalEditor';\r\nimport './PollEditor.css';\r\n\r\nconst PollEditor = ({ poll, onPollSelect }) => {\r\n  const dispatch = useDispatch();\r\n  const { settings } = usePollContext();\r\n  \r\n  const [question, setQuestion] = useState('');\r\n  const [options, setOptions] = useState(['', '']);\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Initialize form when poll changes\r\n  useEffect(() => {\r\n    if (poll) {\r\n      setQuestion(poll.question || '');\r\n      setOptions(poll.options?.map(opt => opt.text) || ['', '']);\r\n      setIsActive(poll.isActive !== false);\r\n    } else {\r\n      // New poll defaults to 2 empty options\r\n      setQuestion('');\r\n      setOptions(['', '']);\r\n      setIsActive(true);\r\n    }\r\n    setError('');\r\n  }, [poll]);\r\n\r\n  const handleQuestionChange = useCallback((editorState) => {\r\n    setQuestion(JSON.stringify(editorState));\r\n  }, []);\r\n\r\n  const handleOptionChange = (index, value) => {\r\n    const newOptions = [...options];\r\n    newOptions[index] = value;\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const addOption = () => {\r\n    setOptions([...options, '']);\r\n  };\r\n\r\n  const removeOption = (index) => {\r\n    if (options.length > 2) {\r\n      const newOptions = options.filter((_, i) => i !== index);\r\n      setOptions(newOptions);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!question.trim()) {\r\n      setError('Question is required');\r\n      return;\r\n    }\r\n\r\n    const validOptions = options.filter(opt => opt.trim());\r\n    if (validOptions.length < 2) {\r\n      setError('At least 2 options are required');\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n    setError('');\r\n\r\n    try {\r\n      const pollData = {\r\n        question,\r\n        options: validOptions,\r\n        isActive,\r\n        contentType: 'lexical'\r\n      };\r\n\r\n      let result;\r\n      if (poll) {\r\n        // Update existing poll\r\n        result = await dispatch(updatePoll({ id: poll._id, pollData })).unwrap();\r\n        socketService.broadcastPollUpdated(result);\r\n      } else {\r\n        // Create new poll\r\n        result = await dispatch(createPoll(pollData)).unwrap();\r\n        socketService.broadcastPollCreated(result);\r\n        onPollSelect(result);\r\n      }\r\n\r\n      if (settings.autoSave) {\r\n        // Auto-save feedback\r\n        setTimeout(() => {\r\n          setIsSaving(false);\r\n        }, 1000);\r\n      } else {\r\n        setIsSaving(false);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to save poll');\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = async () => {\r\n    try {\r\n      if (poll) {\r\n        const updated = await dispatch(resetPoll(poll._id)).unwrap();\r\n        socketService.broadcastPollUpdated(updated);\r\n      }\r\n      // Reset form values to current poll state or defaults\r\n      if (poll) {\r\n        setQuestion(poll.question || '');\r\n        setOptions(poll.options?.map(opt => opt.text) || ['', '']);\r\n        setIsActive(poll.isActive !== false);\r\n      } else {\r\n        setQuestion('');\r\n        setOptions(['', '']);\r\n        setIsActive(true);\r\n      }\r\n      setError('');\r\n    } catch (e) {\r\n      setError('Failed to reset poll');\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!poll) return;\r\n    try {\r\n      await dispatch(deletePoll(poll._id)).unwrap();\r\n      socketService.broadcastPollDeleted(poll._id);\r\n      onPollSelect(null);\r\n    } catch (e) {\r\n      setError('Failed to delete poll');\r\n    }\r\n  };\r\n\r\n  const getQuestionText = () => {\r\n    try {\r\n      const questionData = JSON.parse(question);\r\n      if (questionData.root && questionData.root.children) {\r\n        return questionData.root.children\r\n          .map(child => child.children?.map(c => c.text).join('') || '')\r\n          .join(' ');\r\n      }\r\n    } catch (e) {\r\n      return question;\r\n    }\r\n    return 'Untitled Poll';\r\n  };\r\n\r\n  return (\r\n    <div className=\"poll-editor\">\r\n      <div className=\"poll-editor-header\">\r\n        <h2>{poll ? 'Edit Poll' : 'Create New Poll'}</h2>\r\n        <div className=\"poll-editor-actions\">\r\n          {poll && (\r\n            <button \r\n              className=\"btn btn-secondary\"\r\n              onClick={handleReset}\r\n              disabled={isSaving}\r\n              title=\"Reset votes\"\r\n            >\r\n              Reset Votes\r\n            </button>\r\n          )}\r\n          <button \r\n            className=\"btn btn-secondary\"\r\n            onClick={() => {\r\n              // revert UI fields to defaults/current\r\n              if (poll) {\r\n                setQuestion(poll.question || '');\r\n                setOptions(poll.options?.map(opt => opt.text) || ['', '']);\r\n                setIsActive(poll.isActive !== false);\r\n              } else {\r\n                setQuestion('');\r\n                setOptions(['', '']);\r\n                setIsActive(true);\r\n              }\r\n            }}\r\n            disabled={isSaving}\r\n          >\r\n            Reset Form\r\n          </button>\r\n          {poll && (\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={handleDelete}\r\n              disabled={isSaving}\r\n              title=\"Delete poll\"\r\n            >\r\n              Delete\r\n            </button>\r\n          )}\r\n          <button \r\n            className=\"btn btn-success\"\r\n            onClick={handleSave}\r\n            disabled={isSaving}\r\n          >\r\n            {isSaving ? 'Saving...' : (poll ? 'Update' : 'Create')}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"poll-editor-content\">\r\n        <div className=\"form-section\">\r\n          <label className=\"form-label\">Question</label>\r\n          <div className=\"lexical-editor-container\">\r\n            <LexicalEditor\r\n              initialValue={question}\r\n              onChange={handleQuestionChange}\r\n              placeholder=\"Enter your poll question...\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <label className=\"form-label\">Options</label>\r\n          <div className=\"options-container\">\r\n            {options.map((option, index) => (\r\n              <div key={index} className=\"option-input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input option-input\"\r\n                  value={option}\r\n                  onChange={(e) => handleOptionChange(index, e.target.value)}\r\n                  placeholder={`Option ${index + 1}`}\r\n                />\r\n                {options.length > 2 && (\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-remove\"\r\n                    onClick={() => removeOption(index)}\r\n                    title=\"Remove option\"\r\n                  >\r\n                    ×\r\n                  </button>\r\n                )}\r\n              </div>\r\n            ))}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary btn-add-option\"\r\n              onClick={addOption}\r\n            >\r\n              + Add Option\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n          <label className=\"form-label\">Settings</label>\r\n          <div className=\"settings-group\">\r\n            <label className=\"checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isActive}\r\n                onChange={(e) => setIsActive(e.target.checked)}\r\n              />\r\n              Active Poll\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        {poll && (\r\n          <div className=\"poll-preview\">\r\n            <h3>Preview</h3>\r\n            <div className=\"preview-content\">\r\n              <h4>{getQuestionText()}</h4>\r\n              <div className=\"preview-options\">\r\n                {options.filter(opt => opt.trim()).map((option, index) => (\r\n                  <div key={index} className=\"preview-option\">\r\n                    {option}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PollEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}