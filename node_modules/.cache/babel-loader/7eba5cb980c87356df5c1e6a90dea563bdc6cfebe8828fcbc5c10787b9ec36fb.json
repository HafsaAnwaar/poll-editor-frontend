{"ast":null,"code":"var _jsxFileName = \"D:\\\\polleditor-server\\\\poll-editor\\\\src\\\\components\\\\PollViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePollContext } from '../context/PollContext';\nimport { votePoll, unvotePoll, incrementVoteOptimistic, decrementVoteOptimistic } from '../redux/pollsSlice';\nimport socketService from '../socket/socket';\nimport DOMPurify from 'dompurify';\nimport './PollViewer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PollViewer = ({\n  polls,\n  selectedPoll,\n  onPollSelect,\n  presentationMode = false\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    settings\n  } = usePollContext();\n  const {\n    currentPoll\n  } = useSelector(state => state.polls);\n  const [votingStates, setVotingStates] = useState({}); // Track voting state per option\n  const pendingOperations = useRef(new Map()); // Track pending operations to prevent race conditions\n\n  // Always derive the active poll fresh from the Redux store by id so updates reflect immediately\n  const activePoll = useMemo(() => {\n    const selectedId = (selectedPoll === null || selectedPoll === void 0 ? void 0 : selectedPoll._id) || (currentPoll === null || currentPoll === void 0 ? void 0 : currentPoll._id);\n    if (!selectedId) return null;\n    return polls.find(p => p._id === selectedId) || null;\n  }, [polls, selectedPoll, currentPoll]);\n  useEffect(() => {\n    // Listen for vote updates from WebSocket\n    socketService.onVoteUpdate(({\n      pollId,\n      updatedPoll\n    }) => {\n      if (updatedPoll) {\n        dispatch({\n          type: 'polls/updatePollInStore',\n          payload: updatedPoll\n        });\n      }\n    });\n    return () => {\n      socketService.off('vote_update');\n    };\n  }, [dispatch]);\n  const extractPlainFromMaybeJson = str => {\n    if (!str) return '';\n    const trimmed = String(str).trim();\n    if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\n      try {\n        var _json$root;\n        const json = JSON.parse(trimmed);\n        const children = (json === null || json === void 0 ? void 0 : (_json$root = json.root) === null || _json$root === void 0 ? void 0 : _json$root.children) || [];\n        const text = children.map(node => Array.isArray(node.children) ? node.children.map(c => c.text || '').join('') : '').join(' ').trim();\n        return text || 'Untitled Poll';\n      } catch (_) {\n        return 'Untitled Poll';\n      }\n    }\n    return trimmed || 'Untitled Poll';\n  };\n  const convertLexicalToHtml = str => {\n    if (!str) return '';\n    const trimmed = String(str).trim();\n    if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\n      try {\n        var _json$root2;\n        const json = JSON.parse(trimmed);\n        const children = (json === null || json === void 0 ? void 0 : (_json$root2 = json.root) === null || _json$root2 === void 0 ? void 0 : _json$root2.children) || [];\n        return children.map(node => {\n          if (node.type === 'paragraph') {\n            const textContent = Array.isArray(node.children) ? node.children.map(child => {\n              let text = child.text || '';\n              if (child.format && child.format > 0) {\n                // Apply Lexical formatting\n                if (child.format & 1) text = `<strong>${text}</strong>`; // bold\n                if (child.format & 2) text = `<em>${text}</em>`; // italic\n                if (child.format & 8) text = `<u>${text}</u>`; // underline\n              }\n              return text;\n            }).join('') : '';\n            return `<p>${textContent}</p>`;\n          }\n          return '';\n        }).join('');\n      } catch (_) {\n        return `<p>${trimmed}</p>`;\n      }\n    }\n    return `<p>${trimmed}</p>`;\n  };\n  const sanitize = html => ({\n    __html: DOMPurify.sanitize(html || \"\")\n  });\n  const renderQuestion = poll => {\n    // Always try to show rich text if available\n    if (poll.questionHtml) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-question-content\",\n        dangerouslySetInnerHTML: sanitize(poll.questionHtml)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }, this);\n    } else if (poll.question) {\n      const richHtml = convertLexicalToHtml(poll.question);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-question-content\",\n        dangerouslySetInnerHTML: sanitize(richHtml)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-question-content\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Untitled Poll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this);\n  };\n  const renderOptionText = option => {\n    // Check if option has HTML content\n    if (option.html) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        dangerouslySetInnerHTML: sanitize(option.html)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }, this);\n    } else if (option.text) {\n      // Try to convert if it's Lexical JSON, otherwise show as plain text\n      const trimmed = String(option.text).trim();\n      if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\n        const richHtml = convertLexicalToHtml(option.text);\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          dangerouslySetInnerHTML: sanitize(richHtml)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 16\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: option.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Option\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 12\n    }, this);\n  };\n\n  // Get user's votes for a specific poll\n  const getUserVotes = pollId => {\n    try {\n      const votes = JSON.parse(localStorage.getItem(`user_votes_${pollId}`) || '[]');\n      return Array.isArray(votes) ? votes : [];\n    } catch {\n      return [];\n    }\n  };\n\n  // Save user's votes for a specific poll\n  const saveUserVotes = (pollId, votes) => {\n    localStorage.setItem(`user_votes_${pollId}`, JSON.stringify(votes));\n  };\n\n  // Check if user voted for a specific option\n  const hasUserVotedForOption = (pollId, optionId) => {\n    const userVotes = getUserVotes(pollId);\n    return userVotes.includes(optionId);\n  };\n\n  // Enhanced toggle vote function with better error handling and race condition prevention\n  const toggleVote = useCallback(async (pollId, optionId) => {\n    if (!activePoll || !activePoll.isActive) return;\n\n    // Create operation key for race condition prevention\n    const operationKey = `${pollId}_${optionId}`;\n\n    // Check if there's already a pending operation for this option\n    if (pendingOperations.current.has(operationKey)) {\n      console.log('Operation already in progress for', operationKey);\n      return;\n    }\n\n    // Set voting state for UI feedback\n    setVotingStates(prev => ({\n      ...prev,\n      [optionId]: 'processing'\n    }));\n\n    // Mark operation as pending\n    pendingOperations.current.set(operationKey, true);\n\n    // Capture current state before any changes\n    const userVotesBefore = getUserVotes(pollId);\n    const wasVoted = userVotesBefore.includes(optionId);\n\n    // Store original Redux state for potential rollback\n    const originalPollState = activePoll;\n    try {\n      let result;\n      if (wasVoted) {\n        // UNVOTE OPERATION\n        console.log(`Attempting to unvote option ${optionId} from poll ${pollId}`);\n\n        // First, make the server call\n        result = await dispatch(unvotePoll({\n          pollId,\n          optionId\n        })).unwrap();\n\n        // Only update local state if server call succeeds\n        const newUserVotes = userVotesBefore.filter(id => id !== optionId);\n        saveUserVotes(pollId, newUserVotes);\n        dispatch(decrementVoteOptimistic({\n          pollId,\n          optionId\n        }));\n\n        // Broadcast successful unvote\n        socketService.broadcastVote(pollId, optionId, result);\n        console.log('Unvote successful');\n      } else {\n        // VOTE OPERATION\n        console.log(`Attempting to vote for option ${optionId} on poll ${pollId}`);\n\n        // First, make the server call\n        result = await dispatch(votePoll({\n          pollId,\n          optionId\n        })).unwrap();\n\n        // Only update local state if server call succeeds\n        const newUserVotes = [...userVotesBefore, optionId];\n        saveUserVotes(pollId, newUserVotes);\n        dispatch(incrementVoteOptimistic({\n          pollId,\n          optionId\n        }));\n\n        // Broadcast successful vote\n        socketService.broadcastVote(pollId, optionId, result);\n        console.log('Vote successful');\n      }\n\n      // Update voting state to success\n      setVotingStates(prev => ({\n        ...prev,\n        [optionId]: 'success'\n      }));\n\n      // Clear success state after brief display\n      setTimeout(() => {\n        setVotingStates(prev => {\n          const newState = {\n            ...prev\n          };\n          delete newState[optionId];\n          return newState;\n        });\n      }, 1000);\n    } catch (error) {\n      console.error(`Vote operation failed for option ${optionId}:`, error);\n\n      // Set error state\n      setVotingStates(prev => ({\n        ...prev,\n        [optionId]: 'error'\n      }));\n\n      // Detailed error logging\n      const operation = wasVoted ? 'unvote' : 'vote';\n      console.error(`Failed to ${operation}:`, {\n        pollId,\n        optionId,\n        wasVoted,\n        userVotesBefore,\n        error: error.message || error\n      });\n\n      // Note: We don't need to revert anything since we only made changes after server success\n      // The optimistic updates were only applied after the server call succeeded\n\n      // Clear error state after showing it briefly\n      setTimeout(() => {\n        setVotingStates(prev => {\n          const newState = {\n            ...prev\n          };\n          delete newState[optionId];\n          return newState;\n        });\n      }, 3000);\n    } finally {\n      // Always remove the pending operation\n      pendingOperations.current.delete(operationKey);\n    }\n  }, [activePoll, dispatch]);\n  const calculatePercentage = (votes, totalVotes) => {\n    if (totalVotes === 0) return 0;\n    return Math.round(votes / totalVotes * 100);\n  };\n\n  // Helper to get voting state display info\n  const getVotingStateInfo = optionId => {\n    const state = votingStates[optionId];\n    switch (state) {\n      case 'processing':\n        return {\n          text: 'Processing...',\n          className: 'processing'\n        };\n      case 'success':\n        return {\n          text: 'Success!',\n          className: 'success'\n        };\n      case 'error':\n        return {\n          text: 'Error - Try again',\n          className: 'error'\n        };\n      default:\n        return null;\n    }\n  };\n  const renderPoll = poll => {\n    const userVotes = getUserVotes(poll._id);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-viewer-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: renderQuestion(poll)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"poll-meta\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"poll-status\",\n            children: poll.isActive ? '🟢 Active' : '🔴 Inactive'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"poll-votes\",\n            children: [poll.totalVotes, \" vote\", poll.totalVotes !== 1 ? 's' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"poll-created\",\n            children: [\"Created \", new Date(poll.createdAt).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-options\",\n        children: poll.options.map(option => {\n          const percentage = calculatePercentage(option.votes, poll.totalVotes);\n          const isWinning = poll.totalVotes > 0 && option.votes === Math.max(...poll.options.map(o => o.votes));\n          const hasUserVoted = hasUserVotedForOption(poll._id, option._id);\n          const votingStateInfo = getVotingStateInfo(option._id);\n          const isProcessing = (votingStateInfo === null || votingStateInfo === void 0 ? void 0 : votingStateInfo.className) === 'processing';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `poll-option ${hasUserVoted ? 'user-voted' : ''} ${isWinning ? 'winning' : ''} ${!poll.isActive ? 'disabled' : ''} ${isProcessing ? 'processing' : ''}`,\n            onClick: () => poll.isActive && !isProcessing && toggleVote(poll._id, option._id),\n            style: {\n              cursor: poll.isActive && !isProcessing ? 'pointer' : 'default'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"option-text\",\n                children: renderOptionText(option)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"option-stats\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"vote-count\",\n                  children: [option.votes, \" vote\", option.votes !== 1 ? 's' : '']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"percentage\",\n                  children: [percentage, \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"vote-bar\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"vote-fill\",\n                  style: {\n                    width: `${percentage}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this), hasUserVoted && !votingStateInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-vote-indicator\",\n              children: \"\\u2713 Your vote\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 19\n            }, this), votingStateInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `voting-indicator ${votingStateInfo.className}`,\n              children: votingStateInfo.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this)]\n          }, option._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), userVotes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote-feedback\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You've voted for \", userVotes.length, \" option\", userVotes.length !== 1 ? 's' : '', \" \\uD83C\\uDF89\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"vote-hint\",\n          children: \"Click on an option again to remove your vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)]\n    }, poll._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this);\n  };\n\n  // if (presentationMode) {\n  //   // Full-screen presentation mode\n  //   return (\n  //     <div className=\"poll-viewer presentation-mode\">\n  //       {activePoll ? (\n  //         <div className=\"presentation-content\">\n  //           {renderPoll(activePoll)}\n  //         </div>\n  //       ) : (\n  //         <div className=\"presentation-placeholder\">\n  //           <h1>No poll selected</h1>\n  //           <p>Select a poll to start the presentation</p>\n  //         </div>\n  //       )}\n  //     </div>\n  //   );\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll-viewer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-viewer-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Poll Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll-selector\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: (activePoll === null || activePoll === void 0 ? void 0 : activePoll._id) || '',\n          onChange: e => {\n            const poll = polls.find(p => p._id === e.target.value);\n            onPollSelect(poll);\n          },\n          className: \"poll-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a poll...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), polls.map(poll => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: poll._id,\n            children: extractPlainFromMaybeJson(poll.question)\n          }, poll._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-viewer-content\",\n      children: activePoll ? renderPoll(activePoll) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-poll-selected\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"No poll selected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Choose a poll from the dropdown above to start voting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), polls.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll-list-mini\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"All Polls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mini-poll-list\",\n        children: polls.map(poll => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `mini-poll-item ${(activePoll === null || activePoll === void 0 ? void 0 : activePoll._id) === poll._id ? 'active' : ''}`,\n          onClick: () => onPollSelect(poll),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mini-poll-votes\",\n            children: [poll.totalVotes, \" votes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 17\n          }, this)\n        }, poll._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n};\n_s(PollViewer, \"xZs4ErAKcW5J/r6Blzlajx1KP6o=\", false, function () {\n  return [useDispatch, usePollContext, useSelector];\n});\n_c = PollViewer;\nexport default PollViewer;\nvar _c;\n$RefreshReg$(_c, \"PollViewer\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useRef","useDispatch","useSelector","usePollContext","votePoll","unvotePoll","incrementVoteOptimistic","decrementVoteOptimistic","socketService","DOMPurify","jsxDEV","_jsxDEV","PollViewer","polls","selectedPoll","onPollSelect","presentationMode","_s","dispatch","settings","currentPoll","state","votingStates","setVotingStates","pendingOperations","Map","activePoll","selectedId","_id","find","p","onVoteUpdate","pollId","updatedPoll","type","payload","off","extractPlainFromMaybeJson","str","trimmed","String","trim","startsWith","includes","_json$root","json","JSON","parse","children","root","text","map","node","Array","isArray","c","join","_","convertLexicalToHtml","_json$root2","textContent","child","format","sanitize","html","__html","renderQuestion","poll","questionHtml","className","dangerouslySetInnerHTML","fileName","_jsxFileName","lineNumber","columnNumber","question","richHtml","renderOptionText","option","getUserVotes","votes","localStorage","getItem","saveUserVotes","setItem","stringify","hasUserVotedForOption","optionId","userVotes","toggleVote","isActive","operationKey","current","has","console","log","prev","set","userVotesBefore","wasVoted","originalPollState","result","unwrap","newUserVotes","filter","id","broadcastVote","setTimeout","newState","error","operation","message","delete","calculatePercentage","totalVotes","Math","round","getVotingStateInfo","renderPoll","Date","createdAt","toLocaleString","options","percentage","isWinning","max","o","hasUserVoted","votingStateInfo","isProcessing","onClick","style","cursor","width","length","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/polleditor-server/poll-editor/src/components/PollViewer.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { usePollContext } from '../context/PollContext';\r\nimport { votePoll, unvotePoll, incrementVoteOptimistic, decrementVoteOptimistic } from '../redux/pollsSlice';\r\nimport socketService from '../socket/socket';\r\nimport DOMPurify from 'dompurify';\r\nimport './PollViewer.css';\r\n\r\nconst PollViewer = ({ polls, selectedPoll, onPollSelect, presentationMode = false }) => {\r\n  const dispatch = useDispatch();\r\n  const { settings } = usePollContext();\r\n  const { currentPoll } = useSelector(state => state.polls);\r\n  \r\n  const [votingStates, setVotingStates] = useState({}); // Track voting state per option\r\n  const pendingOperations = useRef(new Map()); // Track pending operations to prevent race conditions\r\n\r\n  // Always derive the active poll fresh from the Redux store by id so updates reflect immediately\r\n  const activePoll = useMemo(() => {\r\n    const selectedId = selectedPoll?._id || currentPoll?._id;\r\n    if (!selectedId) return null;\r\n    return polls.find(p => p._id === selectedId) || null;\r\n  }, [polls, selectedPoll, currentPoll]);\r\n\r\n  useEffect(() => {\r\n    // Listen for vote updates from WebSocket\r\n    socketService.onVoteUpdate(({ pollId, updatedPoll }) => {\r\n      if (updatedPoll) {\r\n        dispatch({ type: 'polls/updatePollInStore', payload: updatedPoll });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socketService.off('vote_update');\r\n    };\r\n  }, [dispatch]);\r\n\r\n  const extractPlainFromMaybeJson = (str) => {\r\n    if (!str) return '';\r\n    const trimmed = String(str).trim();\r\n    if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\r\n      try {\r\n        const json = JSON.parse(trimmed);\r\n        const children = json?.root?.children || [];\r\n        const text = children\r\n          .map((node) => Array.isArray(node.children) ? node.children.map((c) => c.text || '').join('') : '')\r\n          .join(' ')\r\n          .trim();\r\n        return text || 'Untitled Poll';\r\n      } catch (_) {\r\n        return 'Untitled Poll';\r\n      }\r\n    }\r\n    return trimmed || 'Untitled Poll';\r\n  };\r\n\r\n  const convertLexicalToHtml = (str) => {\r\n    if (!str) return '';\r\n    const trimmed = String(str).trim();\r\n    if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\r\n      try {\r\n        const json = JSON.parse(trimmed);\r\n        const children = json?.root?.children || [];\r\n        return children\r\n          .map((node) => {\r\n            if (node.type === 'paragraph') {\r\n              const textContent = Array.isArray(node.children) \r\n                ? node.children.map((child) => {\r\n                    let text = child.text || '';\r\n                    if (child.format && child.format > 0) {\r\n                      // Apply Lexical formatting\r\n                      if (child.format & 1) text = `<strong>${text}</strong>`; // bold\r\n                      if (child.format & 2) text = `<em>${text}</em>`; // italic\r\n                      if (child.format & 8) text = `<u>${text}</u>`; // underline\r\n                    }\r\n                    return text;\r\n                  }).join('')\r\n                : '';\r\n              return `<p>${textContent}</p>`;\r\n            }\r\n            return '';\r\n          })\r\n          .join('');\r\n      } catch (_) {\r\n        return `<p>${trimmed}</p>`;\r\n      }\r\n    }\r\n    return `<p>${trimmed}</p>`;\r\n  };\r\n\r\n  const sanitize = (html) => ({ __html: DOMPurify.sanitize(html || \"\") });\r\n\r\n  const renderQuestion = (poll) => {\r\n    // Always try to show rich text if available\r\n    if (poll.questionHtml) {\r\n      return <div className=\"poll-question-content\" dangerouslySetInnerHTML={sanitize(poll.questionHtml)} />;\r\n    } else if (poll.question) {\r\n      const richHtml = convertLexicalToHtml(poll.question);\r\n      return <div className=\"poll-question-content\" dangerouslySetInnerHTML={sanitize(richHtml)} />;\r\n    }\r\n    return <div className=\"poll-question-content\"><p>Untitled Poll</p></div>;\r\n  };\r\n\r\n  const renderOptionText = (option) => {\r\n    // Check if option has HTML content\r\n    if (option.html) {\r\n      return <span dangerouslySetInnerHTML={sanitize(option.html)} />;\r\n    } else if (option.text) {\r\n      // Try to convert if it's Lexical JSON, otherwise show as plain text\r\n      const trimmed = String(option.text).trim();\r\n      if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\r\n        const richHtml = convertLexicalToHtml(option.text);\r\n        return <span dangerouslySetInnerHTML={sanitize(richHtml)} />;\r\n      }\r\n      return <span>{option.text}</span>;\r\n    }\r\n    return <span>Option</span>;\r\n  };\r\n\r\n  // Get user's votes for a specific poll\r\n  const getUserVotes = (pollId) => {\r\n    try {\r\n      const votes = JSON.parse(localStorage.getItem(`user_votes_${pollId}`) || '[]');\r\n      return Array.isArray(votes) ? votes : [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // Save user's votes for a specific poll\r\n  const saveUserVotes = (pollId, votes) => {\r\n    localStorage.setItem(`user_votes_${pollId}`, JSON.stringify(votes));\r\n  };\r\n\r\n  // Check if user voted for a specific option\r\n  const hasUserVotedForOption = (pollId, optionId) => {\r\n    const userVotes = getUserVotes(pollId);\r\n    return userVotes.includes(optionId);\r\n  };\r\n\r\n  // Enhanced toggle vote function with better error handling and race condition prevention\r\n  const toggleVote = useCallback(\r\n    async (pollId, optionId) => {\r\n      if (!activePoll || !activePoll.isActive) return;\r\n      \r\n      // Create operation key for race condition prevention\r\n      const operationKey = `${pollId}_${optionId}`;\r\n      \r\n      // Check if there's already a pending operation for this option\r\n      if (pendingOperations.current.has(operationKey)) {\r\n        console.log('Operation already in progress for', operationKey);\r\n        return;\r\n      }\r\n\r\n      // Set voting state for UI feedback\r\n      setVotingStates(prev => ({\r\n        ...prev,\r\n        [optionId]: 'processing'\r\n      }));\r\n\r\n      // Mark operation as pending\r\n      pendingOperations.current.set(operationKey, true);\r\n\r\n      // Capture current state before any changes\r\n      const userVotesBefore = getUserVotes(pollId);\r\n      const wasVoted = userVotesBefore.includes(optionId);\r\n      \r\n      // Store original Redux state for potential rollback\r\n      const originalPollState = activePoll;\r\n\r\n      try {\r\n        let result;\r\n        \r\n        if (wasVoted) {\r\n          // UNVOTE OPERATION\r\n          console.log(`Attempting to unvote option ${optionId} from poll ${pollId}`);\r\n          \r\n          // First, make the server call\r\n          result = await dispatch(unvotePoll({ pollId, optionId })).unwrap();\r\n          \r\n          // Only update local state if server call succeeds\r\n          const newUserVotes = userVotesBefore.filter(id => id !== optionId);\r\n          saveUserVotes(pollId, newUserVotes);\r\n          dispatch(decrementVoteOptimistic({ pollId, optionId }));\r\n          \r\n          // Broadcast successful unvote\r\n          socketService.broadcastVote(pollId, optionId, result);\r\n          \r\n          console.log('Unvote successful');\r\n          \r\n        } else {\r\n          // VOTE OPERATION\r\n          console.log(`Attempting to vote for option ${optionId} on poll ${pollId}`);\r\n          \r\n          // First, make the server call\r\n          result = await dispatch(votePoll({ pollId, optionId })).unwrap();\r\n          \r\n          // Only update local state if server call succeeds\r\n          const newUserVotes = [...userVotesBefore, optionId];\r\n          saveUserVotes(pollId, newUserVotes);\r\n          dispatch(incrementVoteOptimistic({ pollId, optionId }));\r\n          \r\n          // Broadcast successful vote\r\n          socketService.broadcastVote(pollId, optionId, result);\r\n          \r\n          console.log('Vote successful');\r\n        }\r\n\r\n        // Update voting state to success\r\n        setVotingStates(prev => ({\r\n          ...prev,\r\n          [optionId]: 'success'\r\n        }));\r\n\r\n        // Clear success state after brief display\r\n        setTimeout(() => {\r\n          setVotingStates(prev => {\r\n            const newState = { ...prev };\r\n            delete newState[optionId];\r\n            return newState;\r\n          });\r\n        }, 1000);\r\n\r\n      } catch (error) {\r\n        console.error(`Vote operation failed for option ${optionId}:`, error);\r\n        \r\n        // Set error state\r\n        setVotingStates(prev => ({\r\n          ...prev,\r\n          [optionId]: 'error'\r\n        }));\r\n\r\n        // Detailed error logging\r\n        const operation = wasVoted ? 'unvote' : 'vote';\r\n        console.error(`Failed to ${operation}:`, {\r\n          pollId,\r\n          optionId,\r\n          wasVoted,\r\n          userVotesBefore,\r\n          error: error.message || error\r\n        });\r\n\r\n        // Note: We don't need to revert anything since we only made changes after server success\r\n        // The optimistic updates were only applied after the server call succeeded\r\n        \r\n        // Clear error state after showing it briefly\r\n        setTimeout(() => {\r\n          setVotingStates(prev => {\r\n            const newState = { ...prev };\r\n            delete newState[optionId];\r\n            return newState;\r\n          });\r\n        }, 3000);\r\n\r\n      } finally {\r\n        // Always remove the pending operation\r\n        pendingOperations.current.delete(operationKey);\r\n      }\r\n    },\r\n    [activePoll, dispatch]\r\n  );\r\n\r\n  const calculatePercentage = (votes, totalVotes) => {\r\n    if (totalVotes === 0) return 0;\r\n    return Math.round((votes / totalVotes) * 100);\r\n  };\r\n\r\n  // Helper to get voting state display info\r\n  const getVotingStateInfo = (optionId) => {\r\n    const state = votingStates[optionId];\r\n    switch (state) {\r\n      case 'processing':\r\n        return { text: 'Processing...', className: 'processing' };\r\n      case 'success':\r\n        return { text: 'Success!', className: 'success' };\r\n      case 'error':\r\n        return { text: 'Error - Try again', className: 'error' };\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const renderPoll = (poll) => {\r\n    const userVotes = getUserVotes(poll._id);\r\n\r\n    return (\r\n      <div key={poll._id} className=\"poll-viewer-card\">\r\n        <div className=\"poll-question\">\r\n          <h2>{renderQuestion(poll)}</h2>\r\n          <div className=\"poll-meta\">\r\n            <span className=\"poll-status\">\r\n              {poll.isActive ? '🟢 Active' : '🔴 Inactive'}\r\n            </span>\r\n            <span className=\"poll-votes\">\r\n              {poll.totalVotes} vote{poll.totalVotes !== 1 ? 's' : ''}\r\n            </span>\r\n            <span className=\"poll-created\">\r\n              Created {new Date(poll.createdAt).toLocaleString()}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"poll-options\">\r\n          {poll.options.map((option) => {\r\n            const percentage = calculatePercentage(option.votes, poll.totalVotes);\r\n            const isWinning = poll.totalVotes > 0 && option.votes === Math.max(...poll.options.map(o => o.votes));\r\n            const hasUserVoted = hasUserVotedForOption(poll._id, option._id);\r\n            const votingStateInfo = getVotingStateInfo(option._id);\r\n            const isProcessing = votingStateInfo?.className === 'processing';\r\n\r\n            return (\r\n              <div\r\n                key={option._id}\r\n                className={`poll-option ${hasUserVoted ? 'user-voted' : ''} ${isWinning ? 'winning' : ''} ${!poll.isActive ? 'disabled' : ''} ${isProcessing ? 'processing' : ''}`}\r\n                onClick={() => poll.isActive && !isProcessing && toggleVote(poll._id, option._id)}\r\n                style={{ cursor: poll.isActive && !isProcessing ? 'pointer' : 'default' }}\r\n              >\r\n                <div className=\"option-content\">\r\n                  <div className=\"option-text\">\r\n                    {renderOptionText(option)}\r\n                  </div>\r\n                  \r\n                  <div className=\"option-stats\">\r\n                    <span className=\"vote-count\">\r\n                      {option.votes} vote{option.votes !== 1 ? 's' : ''}\r\n                    </span>\r\n                    <span className=\"percentage\">{percentage}%</span>\r\n                  </div>\r\n\r\n                  <div className=\"vote-bar\">\r\n                    <div \r\n                      className=\"vote-fill\"\r\n                      style={{ width: `${percentage}%` }}\r\n                    ></div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {hasUserVoted && !votingStateInfo && (\r\n                  <div className=\"user-vote-indicator\">✓ Your vote</div>\r\n                )}\r\n                \r\n                {votingStateInfo && (\r\n                  <div className={`voting-indicator ${votingStateInfo.className}`}>\r\n                    {votingStateInfo.text}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Optional: Show user feedback */}\r\n        {userVotes.length > 0 && (\r\n          <div className=\"vote-feedback\">\r\n            <p>You've voted for {userVotes.length} option{userVotes.length !== 1 ? 's' : ''} 🎉</p>\r\n            <p className=\"vote-hint\">Click on an option again to remove your vote</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // if (presentationMode) {\r\n  //   // Full-screen presentation mode\r\n  //   return (\r\n  //     <div className=\"poll-viewer presentation-mode\">\r\n  //       {activePoll ? (\r\n  //         <div className=\"presentation-content\">\r\n  //           {renderPoll(activePoll)}\r\n  //         </div>\r\n  //       ) : (\r\n  //         <div className=\"presentation-placeholder\">\r\n  //           <h1>No poll selected</h1>\r\n  //           <p>Select a poll to start the presentation</p>\r\n  //         </div>\r\n  //       )}\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div className=\"poll-viewer\">\r\n      <div className=\"poll-viewer-header\">\r\n        <h1>Poll Viewer</h1>\r\n        <div className=\"poll-selector\">\r\n          <select \r\n            value={activePoll?._id || ''} \r\n            onChange={(e) => {\r\n              const poll = polls.find(p => p._id === e.target.value);\r\n              onPollSelect(poll);\r\n            }}\r\n            className=\"poll-select\"\r\n          >\r\n            <option value=\"\">Select a poll...</option>\r\n            {polls.map(poll => (\r\n              <option key={poll._id} value={poll._id}>\r\n                {extractPlainFromMaybeJson(poll.question)}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"poll-viewer-content\">\r\n        {activePoll ? (\r\n          renderPoll(activePoll)\r\n        ) : (\r\n          <div className=\"no-poll-selected\">\r\n            <h2>No poll selected</h2>\r\n            <p>Choose a poll from the dropdown above to start voting</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {polls.length > 0 && (\r\n        <div className=\"poll-list-mini\">\r\n          <h3>All Polls</h3>\r\n          <div className=\"mini-poll-list\">\r\n            {polls.map(poll => (\r\n              <div\r\n                key={poll._id}\r\n                className={`mini-poll-item ${activePoll?._id === poll._id ? 'active' : ''}`}\r\n                onClick={() => onPollSelect(poll)}\r\n              >\r\n                <span className=\"mini-poll-votes\">\r\n                  {poll.totalVotes} votes\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PollViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}