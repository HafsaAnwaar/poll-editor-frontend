{"ast":null,"code":"var _jsxFileName = \"D:\\\\server\\\\poll-editor\\\\src\\\\components\\\\LexicalEditor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { INSERT_ORDERED_LIST_COMMAND, INSERT_UNORDERED_LIST_COMMAND } from \"@lexical/list\";\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getRoot, FORMAT_TEXT_COMMAND, $createParagraphNode, $createTextNode } from 'lexical';\nimport './LexicalEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToolbarPlugin() {\n  _s();\n  const [editor] = useLexicalComposerContext();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lexical-toolbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold'),\n      className: \"toolbar-btn\",\n      title: \"Bold\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic'),\n      className: \"toolbar-btn\",\n      title: \"Italic\",\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"I\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline'),\n      className: \"toolbar-btn\",\n      title: \"Underline\",\n      children: /*#__PURE__*/_jsxDEV(\"u\", {\n        children: \"U\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, 'orderedlist'),\n      className: \"toolbar-btn\",\n      title: \"Bold\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"1.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, 'undefined'),\n      className: \"toolbar-btn\",\n      title: \"Bold\",\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n// naive HTML serialization for paragraphs and text nodes\n_s(ToolbarPlugin, \"MUJTZ3t3NKyXWeKoJUbyWHO70Z4=\", false, function () {\n  return [useLexicalComposerContext];\n});\n_c = ToolbarPlugin;\nfunction editorStateToHtml(editorState) {\n  let html = '';\n  editorState.read(() => {\n    const root = $getRoot();\n    const children = root.getChildren();\n    html = children.map(node => {\n      if (typeof node.getTextContent === 'function') {\n        const text = node.getTextContent();\n        return `<p>${text.replace(/&/g, '&amp;').replace(/</g, '&lt;')}</p>`;\n      }\n      return '';\n    }).join('');\n  });\n  return html;\n}\nfunction editorStateToPlainText(editorState) {\n  let text = '';\n  editorState.read(() => {\n    const root = $getRoot();\n    text = root.getTextContent();\n  });\n  return text;\n}\nconst LexicalEditor = ({\n  initialValue,\n  onChange,\n  placeholder\n}) => {\n  _s2();\n  const initialConfig = useMemo(() => {\n    const editorStateInitializer = editor => {\n      const root = $getRoot();\n      root.clear();\n      if (typeof initialValue === 'string' && initialValue.trim()) {\n        const trimmed = initialValue.trim();\n        if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\n          // Parse serialized editor state JSON safely\n          try {\n            const parsed = editor.parseEditorState(trimmed);\n            editor.setEditorState(parsed);\n            return;\n          } catch (e) {\n            // fallback to plain text seed\n          }\n        }\n        const paragraph = $createParagraphNode();\n        paragraph.append($createTextNode(initialValue));\n        root.append(paragraph);\n        return;\n      }\n      // default empty paragraph\n      const paragraph = $createParagraphNode();\n      paragraph.append($createTextNode(''));\n      root.append(paragraph);\n    };\n    return {\n      namespace: 'PollEditor',\n      theme: {\n        paragraph: 'lexical-paragraph',\n        text: {\n          bold: 'lexical-text-bold',\n          italic: 'lexical-text-italic',\n          underline: 'lexical-text-underline'\n        }\n      },\n      editorState: editorStateInitializer,\n      onError: error => {\n        console.error('Lexical error:', error);\n      }\n    };\n  }, [initialValue]);\n  const handleChange = editorState => {\n    if (!onChange) return;\n    const plain = editorStateToPlainText(editorState);\n    const html = editorStateToHtml(editorState);\n    onChange({\n      plain,\n      html\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lexical-editor-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(LexicalComposer, {\n      initialConfig: initialConfig,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lexical-editor\",\n        children: [/*#__PURE__*/_jsxDEV(ToolbarPlugin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RichTextPlugin, {\n          contentEditable: /*#__PURE__*/_jsxDEV(ContentEditable, {\n            className: \"lexical-content-editable\",\n            placeholder: placeholder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 30\n          }, this),\n          placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lexical-placeholder\",\n            children: placeholder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OnChangePlugin, {\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HistoryPlugin, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s2(LexicalEditor, \"gkUJq0Zg+mhNhroeL8dx2bO7M/M=\");\n_c2 = LexicalEditor;\nexport default LexicalEditor;\nvar _c, _c2;\n$RefreshReg$(_c, \"ToolbarPlugin\");\n$RefreshReg$(_c2, \"LexicalEditor\");","map":{"version":3,"names":["React","useMemo","LexicalComposer","RichTextPlugin","ContentEditable","HistoryPlugin","INSERT_ORDERED_LIST_COMMAND","INSERT_UNORDERED_LIST_COMMAND","OnChangePlugin","useLexicalComposerContext","$getRoot","FORMAT_TEXT_COMMAND","$createParagraphNode","$createTextNode","jsxDEV","_jsxDEV","ToolbarPlugin","_s","editor","className","children","type","onClick","dispatchCommand","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","editorStateToHtml","editorState","html","read","root","getChildren","map","node","getTextContent","text","replace","join","editorStateToPlainText","LexicalEditor","initialValue","onChange","placeholder","_s2","initialConfig","editorStateInitializer","clear","trim","trimmed","startsWith","includes","parsed","parseEditorState","setEditorState","e","paragraph","append","namespace","theme","bold","italic","underline","onError","error","console","handleChange","plain","contentEditable","_c2","$RefreshReg$"],"sources":["D:/server/poll-editor/src/components/LexicalEditor.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\r\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\r\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\r\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\r\nimport {\r\n  INSERT_ORDERED_LIST_COMMAND,\r\n  INSERT_UNORDERED_LIST_COMMAND,\r\n} from \"@lexical/list\";\r\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\r\nimport { $getRoot, FORMAT_TEXT_COMMAND, $createParagraphNode, $createTextNode } from 'lexical';\r\nimport './LexicalEditor.css';\r\n\r\nfunction ToolbarPlugin() {\r\n  const [editor] = useLexicalComposerContext();\r\n  return (\r\n    <div className=\"lexical-toolbar\">\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold')}\r\n        className=\"toolbar-btn\"\r\n        title=\"Bold\"\r\n      >\r\n        <strong>B</strong>\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic')}\r\n        className=\"toolbar-btn\"\r\n        title=\"Italic\"\r\n      >\r\n        <em>I</em>\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline')}\r\n        className=\"toolbar-btn\"\r\n        title=\"Underline\"\r\n      >\r\n        <u>U</u>\r\n      </button>\r\n            <button\r\n        type=\"button\"\r\n        onClick={() => editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, 'orderedlist')}\r\n        className=\"toolbar-btn\"\r\n        title=\"Bold\"\r\n      >\r\n        <strong>1.</strong>\r\n      </button>\r\n                  <button\r\n        type=\"button\"\r\n        onClick={() => editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, 'undefined')}\r\n        className=\"toolbar-btn\"\r\n        title=\"Bold\"\r\n      >\r\n        <strong>.</strong>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// naive HTML serialization for paragraphs and text nodes\r\nfunction editorStateToHtml(editorState) {\r\n  let html = '';\r\n  editorState.read(() => {\r\n    const root = $getRoot();\r\n    const children = root.getChildren();\r\n    html = children\r\n      .map((node) => {\r\n        if (typeof node.getTextContent === 'function') {\r\n          const text = node.getTextContent();\r\n          return `<p>${text.replace(/&/g, '&amp;').replace(/</g, '&lt;')}</p>`;\r\n        }\r\n        return '';\r\n      })\r\n      .join('');\r\n  });\r\n  return html;\r\n}\r\n\r\nfunction editorStateToPlainText(editorState) {\r\n  let text = '';\r\n  editorState.read(() => {\r\n    const root = $getRoot();\r\n    text = root.getTextContent();\r\n  });\r\n  return text;\r\n}\r\n\r\nconst LexicalEditor = ({ initialValue, onChange, placeholder }) => {\r\n  const initialConfig = useMemo(() => {\r\n    const editorStateInitializer = (editor) => {\r\n      const root = $getRoot();\r\n      root.clear();\r\n      if (typeof initialValue === 'string' && initialValue.trim()) {\r\n        const trimmed = initialValue.trim();\r\n        if (trimmed.startsWith('{') && trimmed.includes('\"root\"')) {\r\n          // Parse serialized editor state JSON safely\r\n          try {\r\n            const parsed = editor.parseEditorState(trimmed);\r\n            editor.setEditorState(parsed);\r\n            return;\r\n          } catch (e) {\r\n            // fallback to plain text seed\r\n          }\r\n        }\r\n        const paragraph = $createParagraphNode();\r\n        paragraph.append($createTextNode(initialValue));\r\n        root.append(paragraph);\r\n        return;\r\n      }\r\n      // default empty paragraph\r\n      const paragraph = $createParagraphNode();\r\n      paragraph.append($createTextNode(''));\r\n      root.append(paragraph);\r\n    };\r\n\r\n    return {\r\n      namespace: 'PollEditor',\r\n      theme: {\r\n        paragraph: 'lexical-paragraph',\r\n        text: {\r\n          bold: 'lexical-text-bold',\r\n          italic: 'lexical-text-italic',\r\n          underline: 'lexical-text-underline',\r\n          \r\n        },\r\n      },\r\n      editorState: editorStateInitializer,\r\n      onError: (error) => {\r\n        console.error('Lexical error:', error);\r\n      },\r\n    };\r\n  }, [initialValue]);\r\n\r\n  const handleChange = (editorState) => {\r\n    if (!onChange) return;\r\n    const plain = editorStateToPlainText(editorState);\r\n    const html = editorStateToHtml(editorState);\r\n    onChange({ plain, html });\r\n  };\r\n\r\n  return (\r\n    <div className=\"lexical-editor-wrapper\">\r\n      <LexicalComposer initialConfig={initialConfig}>\r\n        <div className=\"lexical-editor\">\r\n          <ToolbarPlugin />\r\n          <RichTextPlugin\r\n            contentEditable={<ContentEditable className=\"lexical-content-editable\" placeholder={placeholder} />}\r\n            placeholder={<div className=\"lexical-placeholder\">{placeholder}</div>}\r\n          />\r\n          <OnChangePlugin onChange={handleChange} />\r\n          <HistoryPlugin />\r\n        </div>\r\n      </LexicalComposer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LexicalEditor;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}