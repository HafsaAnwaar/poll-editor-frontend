{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunks for API calls\nexport const fetchPolls = createAsyncThunk('polls/fetchPolls', async () => {\n  const response = await axios.get('/api/polls');\n  return response.data;\n});\nexport const createPoll = createAsyncThunk('polls/createPoll', async pollData => {\n  const response = await axios.post('/api/polls', pollData);\n  return response.data;\n});\nexport const updatePoll = createAsyncThunk('polls/updatePoll', async ({\n  id,\n  pollData\n}) => {\n  const response = await axios.put(`/api/polls/${id}`, pollData);\n  return response.data;\n});\nexport const votePoll = createAsyncThunk('polls/votePoll', async ({\n  pollId,\n  optionId\n}) => {\n  const response = await axios.post(`/api/polls/${pollId}/vote`, {\n    optionId\n  });\n  return response.data;\n});\nconst pollsSlice = createSlice({\n  name: 'polls',\n  initialState: {\n    polls: [],\n    currentPoll: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    setCurrentPoll: (state, action) => {\n      state.currentPoll = action.payload;\n    },\n    updatePollInStore: (state, action) => {\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\n        state.currentPoll = action.payload;\n      }\n    },\n    addPollToStore: (state, action) => {\n      state.polls.unshift(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch polls\n    .addCase(fetchPolls.pending, state => {\n      state.loading = true;\n    }).addCase(fetchPolls.fulfilled, (state, action) => {\n      state.loading = false;\n      state.polls = action.payload;\n      state.error = null;\n    }).addCase(fetchPolls.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // Create poll\n    .addCase(createPoll.fulfilled, (state, action) => {\n      state.polls.unshift(action.payload);\n    })\n    // Update poll\n    .addCase(updatePoll.fulfilled, (state, action) => {\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n    })\n    // Vote poll\n    .addCase(votePoll.fulfilled, (state, action) => {\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\n      if (index !== -1) {\n        state.polls[index] = action.payload;\n      }\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\n        state.currentPoll = action.payload;\n      }\n    });\n  }\n});\nexport const {\n  setCurrentPoll,\n  updatePollInStore,\n  addPollToStore\n} = pollsSlice.actions;\nexport default pollsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchPolls","response","get","data","createPoll","pollData","post","updatePoll","id","put","votePoll","pollId","optionId","pollsSlice","name","initialState","polls","currentPoll","loading","error","reducers","setCurrentPoll","state","action","payload","updatePollInStore","index","findIndex","poll","_id","addPollToStore","unshift","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["D:/server/poll-editor/src/redux/pollsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Async thunks for API calls\r\nexport const fetchPolls = createAsyncThunk(\r\n  'polls/fetchPolls',\r\n  async () => {\r\n    const response = await axios.get('/api/polls');\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const createPoll = createAsyncThunk(\r\n  'polls/createPoll',\r\n  async (pollData) => {\r\n    const response = await axios.post('/api/polls', pollData);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updatePoll = createAsyncThunk(\r\n  'polls/updatePoll',\r\n  async ({ id, pollData }) => {\r\n    const response = await axios.put(`/api/polls/${id}`, pollData);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const votePoll = createAsyncThunk(\r\n  'polls/votePoll',\r\n  async ({ pollId, optionId }) => {\r\n    const response = await axios.post(`/api/polls/${pollId}/vote`, { optionId });\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst pollsSlice = createSlice({\r\n  name: 'polls',\r\n  initialState: {\r\n    polls: [],\r\n    currentPoll: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    setCurrentPoll: (state, action) => {\r\n      state.currentPoll = action.payload;\r\n    },\r\n    updatePollInStore: (state, action) => {\r\n      const index = state.polls.findIndex(poll => poll._id === action.payload._id);\r\n      if (index !== -1) {\r\n        state.polls[index] = action.payload;\r\n      }\r\n      if (state.currentPoll && state.currentPoll._id === action.payload._id) {\r\n        state.currentPoll = action.payload;\r\n      }\r\n    },\r\n    addPollToStore: (state, action) => {\r\n      state.polls.unshift(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch polls\r\n      .addCase(fetchPolls.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchPolls.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.polls = action.payload;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchPolls.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      // Create poll\r\n      .addCase(createPoll.fulfilled, (state, action) => {\r\n        state.polls.unshift(action.payload);\r\n      })\r\n      // Update poll\r\n      .addCase(updatePoll.fulfilled, (state, action) => {\r\n        const index = state.polls.findIndex(poll => poll._id === action.payload._id);\r\n        if (index !== -1) {\r\n          state.polls[index] = action.payload;\r\n        }\r\n      })\r\n      // Vote poll\r\n      .addCase(votePoll.fulfilled, (state, action) => {\r\n        const index = state.polls.findIndex(poll => poll._id === action.payload._id);\r\n        if (index !== -1) {\r\n          state.polls[index] = action.payload;\r\n        }\r\n        if (state.currentPoll && state.currentPoll._id === action.payload._id) {\r\n          state.currentPoll = action.payload;\r\n        }\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setCurrentPoll, updatePollInStore, addPollToStore } = pollsSlice.actions;\r\nexport default pollsSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}