{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useLayoutEffect(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\nexports.OnChangePlugin = OnChangePlugin;","map":{"version":3,"names":["LexicalComposerContext","require","react","CAN_USE_DOM","window","document","createElement","useLayoutEffectImpl","useLayoutEffect","useEffect","OnChangePlugin","ignoreHistoryMergeTagChange","ignoreSelectionChange","onChange","editor","useLexicalComposerContext","registerUpdateListener","editorState","dirtyElements","dirtyLeaves","prevEditorState","tags","size","has","isEmpty","exports"],"sources":["D:/polleditor-server/polleditor-server/poll-editor/node_modules/@lexical/react/LexicalOnChangePlugin.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useLayoutEffect(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\n\nexports.OnChangePlugin = OnChangePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,WAAW,IAAI,OAAOD,MAAM,CAACC,QAAQ,CAACC,aAAa,KAAK,WAAW;;AAEnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGJ,WAAW,GAAGD,KAAK,CAACM,eAAe,GAAGN,KAAK,CAACO,SAAS;AACjF,IAAID,eAAe,GAAGD,mBAAmB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,cAAcA,CAAC;EACtBC,2BAA2B,GAAG,IAAI;EAClCC,qBAAqB,GAAG,KAAK;EAC7BC;AACF,CAAC,EAAE;EACD,MAAM,CAACC,MAAM,CAAC,GAAGd,sBAAsB,CAACe,yBAAyB,CAAC,CAAC;EACnEP,eAAe,CAAC,MAAM;IACpB,IAAIK,QAAQ,EAAE;MACZ,OAAOC,MAAM,CAACE,sBAAsB,CAAC,CAAC;QACpCC,WAAW;QACXC,aAAa;QACbC,WAAW;QACXC,eAAe;QACfC;MACF,CAAC,KAAK;QACJ,IAAIT,qBAAqB,IAAIM,aAAa,CAACI,IAAI,KAAK,CAAC,IAAIH,WAAW,CAACG,IAAI,KAAK,CAAC,IAAIX,2BAA2B,IAAIU,IAAI,CAACE,GAAG,CAAC,eAAe,CAAC,IAAIH,eAAe,CAACI,OAAO,CAAC,CAAC,EAAE;UACxK;QACF;QAEAX,QAAQ,CAACI,WAAW,EAAEH,MAAM,EAAEO,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACP,MAAM,EAAEH,2BAA2B,EAAEC,qBAAqB,EAAEC,QAAQ,CAAC,CAAC;EAC1E,OAAO,IAAI;AACb;AAEAY,OAAO,CAACf,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}